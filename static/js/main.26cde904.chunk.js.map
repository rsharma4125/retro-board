{"version":3,"sources":["models/User.ts","env-config.ts","service/Firebase.ts","redux/types/RetroBoardActionTypes.ts","components/smart/PageFooter.tsx","components/smart/PageHeader.tsx","components/smart/layouts/LayoutAuthenticated.tsx","components/smart/layouts/LayoutUnauthenticated.tsx","models/RetroBoard.ts","models/RetroWalls.ts","models/Notes.ts","redux/reducers/RetroBoardReducers.ts","redux/store/Store.ts","components/smart/boards/MyBoards.tsx","components/dumb/EditText.tsx","components/dumb/ColorPicker.tsx","components/dumb/boards/Editor.tsx","components/dumb/boards/Like.tsx","redux/actions/RetroBoardActions.ts","service/WebSocket/DuplexCommunication.ts","service/UnauthorizedException.ts","service/RetroBoard/RetroBoardServiceV2.ts","service/RetroBoard/RetroBoardServiceFactory.ts","components/smart/boards/StickyNote.tsx","models/Note.ts","components/dumb/templates/DisplayBoardTemplate.tsx","components/dumb/templates/CreateNewTemplate.tsx","components/smart/boards/CreateRetroBoard.tsx","models/RetroWall.ts","components/smart/boards/CreateRetroBoardManager.tsx","components/smart/templates/TemplateManager.tsx","containers/HomePage.tsx","components/dumb/boards/AddNewNote.tsx","components/dumb/CarouselView.tsx","components/smart/boards/StickyWall.tsx","components/dumb/ShareBoard.tsx","containers/RetroBoardPage.tsx","containers/LoginPage.tsx","components/smart/Logout.tsx","components/dumb/teams/AddNewTeamMember.tsx","components/dumb/teams/TeamCard.tsx","models/Team.ts","components/dumb/teams/CreateNewTeam.tsx","containers/TeamsPage.tsx","service/Teams/TeamsServiceV1.ts","service/Templates/TemplateService.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["User","uid","idToken","username","displayName","email","isEmailVerified","ID_TOKEN","USER_INFO","REFRESH_TOKEN","PROTOCOL","window","location","protocol","HOST_NAMES","Map","set","host","SERVICE_URL","get","console","log","request","axios","create","baseURL","interceptors","use","config","headers","localStorage","getItem","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Firebase","React","createContext","auth","authenticatedUser","googleAuthenticationProvider","firebase","GoogleAuthProvider","loggedInUser","initializeApp","this","database","signInWithPopup","userCredentials","persistLoggedInUserInfo","generateRandomText","length","result","characters","charactersLength","i","charAt","Math","floor","random","user","getIdToken","isAnonymous","post","status","setItem","JSON","stringify","refreshToken","loggedInUserJson","parse","fetch","method","body","grant_type","refresh_token","newIdToken","json","data","id_token","signInAnonymously","clear","instance","ActionTypes","SortType","PageFooter","className","href","withRouter","props","getInstance","getLoggedInUser","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","id","Nav","to","Button","onClick","history","push","variant","LayoutAuthenticated","state","isUserAuthenticated","isLoading","then","response","setState","Spinner","animation","Container","fluid","children","pathname","referrer","Component","LayoutUnauthenticated","search","includes","RETRO_BOARD_STYLES","wentWell","stickyNote","backgroundColor","textColor","likeBtnPosition","toImprove","actionItems","RetroBoard","name","userId","maxLikes","blur","retroBoard","RetroWalls","retroWalls","retroBoardId","walls","Notes","notes","_notes","_removeDuplicates","arr","forEach","note","index","findIndex","item","noteId","initialState","sortByVotes","sort","item1","item2","itemOneLikesCount","itemTwoLikesCount","likedBy","logger","createLogger","store","createStore","action","type","CREATE_RETRO_BOARD","payload","CREATE_RETRO_WALLS","CREATE_NOTE","UPDATE_NOTE","modifiedNotes","map","Object","assign","DELETE_NOTE","GET_NOTES","SORT","SORT_BY_VOTES","SORT_BY_TIMESTAMP","REFRESH_WALLS","composeWithDevTools","applyMiddleware","ReduxPromise","MyBoards","retroBoardService","useState","boards","setBoards","loader","setLoader","useEffect","a","getMyBoards","myBoards","_getMyBoards","catch","e","Row","style","position","top","left","board","Col","lg","key","Card","Body","Footer","deleteBoard","boardId","filter","handleDelete","color","EditText","showForm","setForm","textVal","setTextVal","handleOnBlur","onSubmit","Form","preventDefault","handleSubmit","FormGroup","Control","value","onBlur","onChange","currentTarget","handleChange","FormLabel","fontSize","fontWeight","marginRight","title","ColorPicker","setColor","DropdownButton","Dropdown","Item","onChangeComplete","handleOnChangeComplete","Editor","editorText","noteText","handleKeyboardKeyPress","handleEnter","replace","bind","InputGroup","FormControl","as","autoFocus","data-testid","onKeyUp","aria-label","Like","users","handleUpVote","getCurrentUser","userJson","Badge","cursor","margin","Link","RetroBoardActions","DuplexCommunication","isConnected","socket","SockJS","stomp","Stomp","over","accessToken","connect","success","error","connected","topic","callback","subscribeInterval","setInterval","clearInterval","subscribe","UnauthorizedException","message","RetroBoardServiceV2","newNote","Error","retroBoardResponse","retroWallsResponse","delete","params","retroWallId","uri","wallId","isAuth","Promise","resolve","notesData","sortedByVotes","obj1","obj2","modifiedNote","put","selectedTeams","itemId","teamIds","selectedTeam","teamId","RetroBoardServiceFactory","StickyNote","showToast","toastMessage","stickyNoteId","showEditor","handleOnClick","modifyStickyNote","getNoteWhenLiked","updateNote","createdBy","totalLikes","some","u","hasVotedBefore","_getTotalLikesForUser","maxAllowedLikes","sortBy","setTimeout","cardBodyContent","width","source","escapeHtml","mergedNotes","split","_mergeNoteIfRequired","padding","fontFamily","minHeight","modifiedNoteText","right","bottom","deleteNote","Toast","show","dispatch","service","retroBoardActions","Note","String","Date","now","DisplayBoardTemplate","boardTemplate","removeWall","wall","wallTitle","noteStyle","NONE","wallStyle","CreateNewTemplate","setShow","hideModal","templateTitle","templateId","setBoardTemplate","setWallTitle","setTextColor","setBackgroundColor","border","Modal","onHide","dialogClassName","Header","text","inline","placeholder","handleWallName","marginLeft","hex","newTemplateWall","wallOrder","disabled","slice","onCreateTemplate","CreateRetroBoard","onCreateRetroBoard","formInput","setFormInput","handleClose","handleCreateRetroBoard","closeButton","Title","Group","Label","autoComplete","RetroWall","sortCards","useDispatch","boardInput","createNewRetroBoard","createRetroBoard","templateWalls","createRetroWalls","templateWall","newInstance","setWallOrder","boardWalls","templates","setTemplates","handleCreateTemplate","templateService","createBoardTemplate","persistedBoardTemplate","deleteTemplate","deleteBoardTemplate","template","getBoardTemplates","boardTemplates","md","CreateRetroBoardManager","HomePage","document","AddNewNote","addNote","CarouselView","carouselView","setCarouselView","setIndex","Carousel","activeIndex","onSelect","selectedIndex","interval","items","height","Caption","overflowY","borderTop","formatText","StickyWall","retroWall","handleDragStart","handleDrop","handleDragOver","getNotes","getDataOnUpdate","addNewNote","droppedOnNote","draggedNote","dataTransfer","getData","dropEffect","setData","wallNotes","stickers","ListGroupItem","marginBottom","draggable","onDragStart","onDragOver","onDrop","ListGroup","createNote","ShareBoard","teams","pageLoader","setPageLoader","setSelectedTeams","undefined","setResponse","shareWith","Alert","multiple","selectedItems","selectedOptions","find","team","teamName","ProgressBar","animated","SortSelect","sortSelectValue","setSortSelectValue","target","defaultValue","BlurToggle","retroBoardState","useSelector","useReduxSelector","val","updateRetroBoard","isChecked","Check","checked","label","RetroBoardPage","convertJsonToCsv","shareBoardWith","match","initRetroBoard","getRetroBoardById","teamsService","getMyTeams","getRetroBoardDataOnUpdate","getRetroWalls","wallName","upvotes","shareBoard","filename","refreshRetroWalls","LoginPage","getReferrerUrl","tryGoogleLogin","tryAnonymousLogin","authenticateUser","authenticateAnonymousUser","Logout","logout","AddNewTeamMember","showModal","setShowModal","closeModal","teamMemberEmail","setTeamMemberEmail","msg","setError","addTeamMember","TeamCard","currUser","setCurrUser","openModal","setOpenModal","removeUser","removeMember","isOwner","deleteTeam","teamMembers","teamMember","render","Team","CreateNewTeam","setTeamName","createTeam","TeamsPage","myTeams","sm","xs","member","createNewTeam","newTeam","newTeams","removeTeamMember","getTeamMember","teamMembersResponse","itr","newState","t","alert","TeamsServiceV1","newTeamResponse","teamsResponse","TemplateService","templateResponse","App","isLogInFlowExecuted","exact","path","component","Boolean","hostname","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.26cde904.chunk.js","sourcesContent":["class User {\n    public static ID_TOKEN = \"idToken\";\n    public static USER_INFO = \"userInfo\";\n    public static REFRESH_TOKEN = \"refreshToken\";\n\n    public uid: string = \"\"\n    public idToken: string = \"\"\n    public username: string | undefined\n    public displayName: string = \"\"\n    public email: string = \"\"\n    public isEmailVerified: boolean = false;\n}\n\nexport default User","import axios from \"axios\";\nimport User from \"./models/User\";\n\nconst API_HOST_LOCAL = 'localhost:8082';\nconst API_INET_LOCAL = '192.168.1.6:8082';\nconst API_HOST_TEST = '139.59.25.205:8082';\nconst API_HOST_PROD = 'retro-service.bemyaficionado.com';\n\nconst UI_HOST_LOCAL = 'localhost:3000';\nconst UI_INET_LOCAL = '192.168.1.6:3000';\nconst UI_HOST_TEST = 'localhost:3001';\nconst UI_HOST_PROD = 'retro.bemyaficionado.com';\nconst UI_HOST_GITHUB = 'vslala.github.io';\n\nconst PROTOCOL = window.location.protocol + \"//\";\nconst HOST_NAMES:Map<string,string> = new Map<string,string>();\nHOST_NAMES.set(UI_HOST_LOCAL, API_HOST_LOCAL);\nHOST_NAMES.set(UI_INET_LOCAL, API_INET_LOCAL);\nHOST_NAMES.set(UI_HOST_TEST, API_HOST_TEST);\nHOST_NAMES.set(UI_HOST_PROD, API_HOST_PROD);\nHOST_NAMES.set(UI_HOST_GITHUB, API_HOST_PROD);\n\nlet host = window.location.host;\n// @ts-ignore\nexport const SERVICE_URL = PROTOCOL + HOST_NAMES.get(host); // hostname:port\n\nconsole.log(\"SERVICE_URL: \", SERVICE_URL);\n\nexport const request = axios.create({\n    baseURL: SERVICE_URL\n});\n\nrequest.interceptors.request.use((config) => {\n    config.headers = {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem(User.ID_TOKEN)!}`,\n        'Accept': '*/*'\n    }\n    return config;\n});\n","import React from 'react'\nimport firebase from \"firebase\";\nimport User from \"../models/User\";\nimport {request, SERVICE_URL} from \"../env-config\";\n\nexport const config = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n}\n\nexport interface RefreshTokenResponse {\n    access_token: string\n    expires_in: number\n    token_type: string,\n    refresh_token: string,\n    id_token: string,\n    user_id: string,\n    project_id: string\n}\n\nexport const FirebaseContext = React.createContext(null)\n\nclass Firebase {\n\n    private static instance: Firebase\n\n    private auth: firebase.auth.Auth\n    private authenticatedUser: firebase.auth.UserCredential | undefined;\n    private googleAuthenticationProvider = new firebase.auth.GoogleAuthProvider()\n    private loggedInUser: User | undefined\n\n    private constructor() {\n        firebase.initializeApp(config)\n        this.auth = firebase.auth()\n\n        \n    }\n\n    public static getInstance() {\n        if (!Firebase.instance) {\n            Firebase.instance = new Firebase();\n        }\n\n        return Firebase.instance;\n    }\n\n    public getDatabase(): firebase.database.Database {\n        return firebase.database()\n    }\n\n    public async authenticateUser(): Promise<void> {\n        let userCredentials = await this.auth.signInWithPopup(this.googleAuthenticationProvider)\n        await this.persistLoggedInUserInfo(userCredentials);\n    }\n\n    private async persistLoggedInUserInfo(userCredentials: firebase.auth.UserCredential) {\n\n        function generateRandomText(length: number) {\n            let result           = '';\n            let characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            let charactersLength = characters.length;\n            for ( let i = 0; i < length; i++ ) {\n                result += characters.charAt(Math.floor(Math.random() * charactersLength));\n            }\n            return result;\n        }\n\n        let idToken = await userCredentials.user!.getIdToken()\n\n        console.log(\"Logged In User: \", userCredentials)\n\n        if (userCredentials.user) {\n            this.loggedInUser = new User()\n            this.loggedInUser.displayName = userCredentials.user.displayName || `${generateRandomText(5)}`\n            this.loggedInUser.idToken = idToken\n            this.loggedInUser.email = userCredentials.user.email || `${generateRandomText(5)}@retro.com`\n            this.loggedInUser.uid = userCredentials.user.uid || \"\"\n            this.loggedInUser.isEmailVerified = !userCredentials.user.isAnonymous;\n\n            let response = await request.post(\"/login\", userCredentials.user);\n            if (response.status === 200) {\n                localStorage.setItem(User.ID_TOKEN, idToken);\n                localStorage.setItem(User.USER_INFO, JSON.stringify(this.loggedInUser))\n                localStorage.setItem(User.REFRESH_TOKEN, userCredentials.user.refreshToken)\n            }\n        }\n\n\n    }\n\n    public getLoggedInUser(): User | undefined {\n        let loggedInUserJson = localStorage.getItem(User.USER_INFO)!;\n        if (loggedInUserJson)\n            return JSON.parse(loggedInUserJson) as User\n    }\n\n    public async isUserAuthenticated(): Promise<boolean> {\n        let refreshToken = localStorage.getItem(User.REFRESH_TOKEN);\n        let idToken = localStorage.getItem(User.ID_TOKEN);\n\n\n        if (refreshToken) {\n            if (idToken) {\n                let response = await fetch(`${SERVICE_URL}/token/verify?id_token=${idToken}`)\n                if (200 === response.status) {\n                    return true;\n                } else {\n                    let newIdToken = await fetch(`https://securetoken.googleapis.com/v1/token?key=${config.apiKey}`, {\n                        method: \"POST\",\n                        body: JSON.stringify({\n                            grant_type: \"refresh_token\",\n                            refresh_token: refreshToken\n                        })\n                    });\n                    let data = (await newIdToken.json()) as RefreshTokenResponse;\n                    localStorage.setItem(User.ID_TOKEN, data.id_token);\n                    localStorage.setItem(User.REFRESH_TOKEN, data.refresh_token);\n                }\n            }\n\n            console.log(\"User is authenticated!\");\n            return true;\n        }\n\n        console.log(\"User is not authenticated!\");\n        return false;\n    }\n\n    public getIdToken(): string {\n        return localStorage.getItem(User.ID_TOKEN)!;\n    }\n\n    public async authenticateAnonymousUser(): Promise<void> {\n        let userCredentials = await this.auth.signInAnonymously()\n        await this.persistLoggedInUserInfo(userCredentials)\n    }\n\n    logout() {\n        localStorage.clear()\n    }\n}\n\n\nexport default Firebase","import RetroBoard from \"../../models/RetroBoard\";\nimport RetroWalls from \"../../models/RetroWalls\";\nimport Note from \"../../models/Note\";\nimport Notes from \"../../models/Notes\";\n\nexport enum ActionTypes {\n    SORT,\n    GET_NOTES,\n    RETRIEVE_RETRO_BOARD,\n    UPDATE_NOTE,\n    DELETE_NOTE,\n    CREATE_NOTE,\n    CREATE_RETRO_WALLS,\n    CREATE_RETRO_BOARD,\n    REFRESH_WALLS\n}\n\nexport enum SortType {\n    NONE,\n    SORT_BY_VOTES,\n    SORT_BY_TIMESTAMP\n}\n\ninterface CreateRetroBoardAction {\n    type: typeof ActionTypes.CREATE_RETRO_BOARD\n    payload: RetroBoard\n}\n\ninterface CreateRetroWallsAction {\n    type: typeof ActionTypes.CREATE_RETRO_WALLS\n    payload: RetroWalls\n}\n\ninterface CreateNoteAction {\n    type: typeof ActionTypes.CREATE_NOTE\n    payload: Note\n}\n\ninterface UpdateNoteAction {\n    type: typeof ActionTypes.UPDATE_NOTE\n    payload: Note\n}\n\ninterface DeleteNoteAction {\n    type: typeof ActionTypes.DELETE_NOTE\n    payload: Note\n}\n\ninterface GetNotesAction {\n    type: typeof ActionTypes.GET_NOTES\n    payload: Notes\n}\n\ninterface Sort {\n    type: typeof ActionTypes.SORT\n    payload: SortType\n}\n\ninterface RefreshWalls {\n    type: typeof ActionTypes.REFRESH_WALLS\n    payload: RetroWalls\n}\n\nexport type RetroBoardActionTypes = CreateRetroBoardAction | CreateRetroWallsAction | CreateNoteAction |\n    UpdateNoteAction | DeleteNoteAction | GetNotesAction | Sort | RefreshWalls","import React, {FunctionComponent} from 'react'\n\nconst PageFooter: FunctionComponent = () => {\n\n    return <footer className=\"mt-auto font-small blue pt-sm-3\">\n        <div className=\"footer-copyright text-center py-1\">\n            <p><a href=\"https://www.bemyaficionado.com\"> a <strong>Varun Shrivastava</strong> production</a>\n            </p>\n            <p><strong>TheRetroBoard©2020</strong></p>\n        </div>\n    </footer>\n} \n\nexport default PageFooter","import React from 'react'\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\nimport Button from \"react-bootstrap/Button\";\nimport {Link, withRouter} from \"react-router-dom\";\nimport {RouteComponentProps} from \"react-router\";\nimport Firebase from \"../../service/Firebase\";\n\ninterface Props extends RouteComponentProps {\n\n}\nconst PageHeader: React.FunctionComponent<Props> = (props:Props) => {\n    const logout = () => {\n        localStorage.clear();\n        props.history.push(\"/login\");\n    }\n\n    let loggedInUser = Firebase.getInstance().getLoggedInUser()!;\n\n    return <Navbar bg=\"light\" expand=\"lg\">\n        <Navbar.Brand href=\"/#/\">Retro Board</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto\">\n                <Link className={\"nav-link\"} to={\"/\"}>Home</Link>\n                {\n                    loggedInUser.isEmailVerified ?\n                        <Link className={\"nav-link\"} to={\"/teams\"}>Teams</Link>: <></>\n                }\n\n                {/*<Nav.Link href=\"#link\">Link</Nav.Link>*/}\n                {/*<NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">*/}\n                {/*    <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>*/}\n                {/*    <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>*/}\n                {/*    <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>*/}\n                {/*    <NavDropdown.Divider/>*/}\n                {/*    <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>*/}\n                {/*</NavDropdown>*/}\n            </Nav>\n            <Button onClick={logout} variant={\"outline-primary\"}>\n                <i className={\"fa fa-sign-out\"} />\n            </Button>\n        </Navbar.Collapse>\n    </Navbar>\n}\n\nexport default withRouter(PageHeader)","import React from 'react'\nimport {Redirect, RouteComponentProps, withRouter} from \"react-router-dom\";\nimport Firebase from \"../../../service/Firebase\";\nimport Container from \"react-bootstrap/Container\";\nimport PageFooter from \"../PageFooter\";\nimport PageHeader from \"../PageHeader\";\nimport {Spinner} from \"react-bootstrap\";\n\ninterface Props extends RouteComponentProps {\n}\n\ninterface State {\n    isUserAuthenticated: boolean\n    isLoading: boolean\n}\n\nclass LayoutAuthenticated extends React.Component<Props, State> {\n\n    state: State = {\n        isUserAuthenticated: false,\n        isLoading: true\n    };\n\n    componentDidMount(): void {\n        Firebase.getInstance().isUserAuthenticated().then(response => {\n            this.setState({isUserAuthenticated: response, isLoading: false});\n        });\n    }\n\n    render(): JSX.Element {\n        if (this.state.isLoading) return <Spinner animation={\"border\"} />;\n        else if (this.state.isUserAuthenticated)\n            return <Container fluid={true} className={\"d-flex w-100 h-100 p-3 mx-auto flex-column\"}>\n                <PageHeader/>\n                {this.props.children}\n                <PageFooter/>\n            </Container>\n        else\n            return <Redirect to={{pathname: \"/login\", state: {referrer: this.props.location.pathname}}}/>\n    }\n}\n\nexport default withRouter(LayoutAuthenticated)","import React from 'react'\nimport {Redirect, RouteComponentProps, withRouter} from \"react-router-dom\";\nimport Firebase from \"../../../service/Firebase\";\nimport Container from \"react-bootstrap/Container\";\nimport PageFooter from \"../PageFooter\";\n\ninterface Props extends RouteComponentProps {\n    success: () => void\n}\n\nclass LayoutUnauthenticated extends React.Component<Props> {\n\n    render(): JSX.Element {\n\n        const {pathname, search} = this.props.location\n\n        // if user is logged in and requests for login page\n        // then redirect it to home (/)\n        // otherwise, forward the request to original address\n        if (Firebase.getInstance().getLoggedInUser()) {\n            if (pathname.includes(\"login\"))\n                return <Redirect to={\"/\"}/>\n            return <Redirect to={`${pathname}${search}`}/>\n        }\n\n        return <Container fluid={true} className={\"d-flex w-100 h-100 p-3 mx-auto flex-column\"} >\n            {this.props.children}\n            <PageFooter />\n        </Container>\n    }\n}\n\nexport default withRouter(LayoutUnauthenticated)","import {RetroBoardModel} from \"../interfaces/RetroBoardModel\";\nimport {WallStyle} from \"../interfaces/StickyWallModel\";\n\n\nconst WENT_WELL_WALL_STYLE: WallStyle = {\n    stickyNote: {\n        backgroundColor: \"#009688\",\n        textColor: \"white\",\n        likeBtnPosition: \"right\"\n    }\n}\n\nconst TO_IMPROVE_WALL_STYLE: WallStyle = {\n    stickyNote: {\n        backgroundColor: \"#e91e63\",\n        textColor: \"white\",\n        likeBtnPosition: \"right\"\n    }\n}\n\nconst ACTION_ITEMS_WALL_STYLE: WallStyle = {\n    stickyNote: {\n        backgroundColor: \"#9c27b0\",\n        textColor: \"white\",\n        likeBtnPosition: \"right\"\n    }\n}\nexport const RETRO_BOARD_STYLES = {\n    wentWell: WENT_WELL_WALL_STYLE,\n    toImprove: TO_IMPROVE_WALL_STYLE,\n    actionItems: ACTION_ITEMS_WALL_STYLE\n}\n\nclass RetroBoard implements RetroBoardModel {\n    id: string\n    name: string\n    maxLikes:number\n    blur: \"on\" | \"off\"\n    userId: string\n\n    constructor(id:string, name:string, userId: string) {\n        this.id = id\n        this.name = name\n        this.maxLikes = 5\n        this.blur = \"off\"\n        this.userId = userId\n    }\n\n    public static newInstance(id:string, name:string, userId: string) {\n        return  new RetroBoard(id, name, userId);\n    }\n\n    public static toJSON(retroBoard: RetroBoard) {\n        return JSON.stringify(retroBoard)\n    }\n    \n    public static fromJSON(json:string): RetroBoard {\n        return JSON.parse(json) as RetroBoard\n    }\n}\n\nexport default RetroBoard","import RetroWall from \"./RetroWall\";\n\nclass RetroWalls {\n    retroBoardId: string = \"\"\n    walls: RetroWall[]\n    \n    constructor(retroWalls: RetroWall[]) {\n        this.walls = retroWalls\n    }\n    \n    public static toJSON(retroWalls:RetroWalls) {\n        return JSON.stringify(retroWalls)\n    }\n    \n    public static fromJSON(json:string): RetroWalls {\n        return JSON.parse(json)\n    }\n}\n\nexport default RetroWalls","import Note from \"./Note\";\n\nclass Notes {\n    get notes(): Note[] {\n        return [...this._notes];\n    }\n    \n    private readonly _notes: Note[]\n    \n    constructor(notes:Note[]) {\n        this._notes = this._removeDuplicates(notes)\n    }\n    \n    public static fromJSON(json:string): Notes {\n        \n        return JSON.parse(json)\n    }\n    \n    public static toJSON(notes: Notes): string {\n        return JSON.stringify(notes)\n    }\n    \n    private _removeDuplicates(notes: Note[]) {\n        let arr: Note[] = []\n        notes.forEach((note, index) => {\n            let itemIndex = arr.findIndex((item) => item.noteId === note.noteId)\n            if (itemIndex === -1)\n                arr.push(note)\n        })\n        return arr\n    }\n\n}\n\nexport default Notes","import RetroBoardState from \"./RetroBoardState\";\nimport RetroBoard from \"../../models/RetroBoard\";\nimport RetroWalls from \"../../models/RetroWalls\";\nimport Notes from \"../../models/Notes\";\nimport {ActionTypes, RetroBoardActionTypes, SortType} from \"../types/RetroBoardActionTypes\";\nimport Note from \"../../models/Note\";\n\nexport const initialState: RetroBoardState = {\n    retroBoard: new RetroBoard(\"\", \"\", \"\"),\n    retroWalls: new RetroWalls([]),\n    notes: new Notes([])\n}\n\nfunction sortByVotes(notes: Notes) {\n    return new Notes(notes.notes.sort((item1, item2) => {\n        let itemOneLikesCount = 0\n        let itemTwoLikesCount = 0\n\n        if (item1.likedBy)\n            itemOneLikesCount = item1.likedBy.length\n        if (item2.likedBy)\n            itemTwoLikesCount = item2.likedBy.length\n\n        return 0 - (itemOneLikesCount > itemTwoLikesCount ? 1 : -1)\n    }))\n}\n\nexport function retroBoardReducer(state = initialState, action: RetroBoardActionTypes): RetroBoardState {\n\n    switch (action.type) {\n        case ActionTypes.CREATE_RETRO_BOARD:\n            return {\n                ...state,\n                retroBoard: action.payload\n            }\n\n        case ActionTypes.CREATE_RETRO_WALLS:\n            return {\n                ...state,\n                retroWalls: action.payload,\n            }\n\n        case ActionTypes.CREATE_NOTE:\n            return {\n                ...state,\n                notes: new Notes([\n                    ...state.notes.notes,\n                    action.payload\n                ])\n            }\n\n        case ActionTypes.UPDATE_NOTE:\n            let modifiedNotes = state.notes.notes.map((note) =>\n                note.noteId === action.payload.noteId ? Object.assign({}, note, action.payload) : note)\n\n            return {\n                ...state,\n                notes: new Notes(modifiedNotes)\n            }\n\n        case ActionTypes.DELETE_NOTE:\n            let notes: Note[] = []\n            state.notes.notes.forEach((note) => {\n\n                if (note.noteId !== action.payload.noteId)\n                    notes.push(note)\n            })\n\n            return {\n                ...state,\n                notes: new Notes(notes)\n            }\n\n        case ActionTypes.GET_NOTES:\n            console.log(\"Get Notes: \", action.payload)\n            return {\n                ...state,\n                notes: action.payload\n            }\n\n        case ActionTypes.SORT:\n            switch (action.payload) {\n                case SortType.SORT_BY_VOTES:\n                    return {\n                        ...state,\n                        notes: sortByVotes(state.notes)\n                    }\n                case SortType.SORT_BY_TIMESTAMP:\n                    return {\n                        // TODO: sort notes by timestamp\n                        ...state\n                    }\n                default:\n                    return state\n            }\n\n        case ActionTypes.REFRESH_WALLS:\n            return {\n                ...state,\n                retroWalls: action.payload,\n                notes: new Notes([])\n            }\n\n\n    }\n    return initialState\n}","import {createLogger} from \"redux-logger\";\nimport {applyMiddleware, createStore} from \"redux\";\nimport {initialState, retroBoardReducer} from \"../reducers/RetroBoardReducers\";\nimport {composeWithDevTools} from \"redux-devtools-extension\";\nimport ReduxPromise from 'redux-promise'\n\nconst logger = createLogger();\n\nconst store = createStore(retroBoardReducer, initialState, composeWithDevTools(\n    applyMiddleware(ReduxPromise, logger),\n));\n\nexport default store;","import React, {FunctionComponent, useEffect, useState} from 'react'\nimport RetroBoard from \"../../../models/RetroBoard\";\nimport Card from \"react-bootstrap/Card\";\nimport {Row, Spinner} from 'react-bootstrap';\nimport Col from \"react-bootstrap/Col\";\nimport {Link} from \"react-router-dom\";\nimport Firebase from \"../../../service/Firebase\";\nimport Button from \"react-bootstrap/Button\";\nimport {RetroBoardService} from \"../../../service/RetroBoard/RetroBoardService\";\n\ninterface Props {\n    retroBoardService: RetroBoardService\n}\n\nconst MyBoards: FunctionComponent<Props> = ({retroBoardService}) => {\n\n    const [boards, setBoards] = useState<RetroBoard[]>([])\n    const [loader, setLoader] = useState<boolean>(false)\n\n\n    useEffect(() => {\n        async function _getMyBoards() {\n            let myBoards = await retroBoardService.getMyBoards()\n            setBoards(myBoards)\n        }\n        \n        _getMyBoards().catch((e) => console.log(\"User not logged In!\", e));\n    }, [retroBoardService])\n\n    const handleDelete = (board: RetroBoard) => {\n        setLoader(true)\n        retroBoardService.deleteBoard(board).then(boardId => {\n            setLoader(false)\n            setBoards(boards.filter(board => board.id !== boardId))\n        }).catch(e => {console.log(\"Error deleting board! \", e); setLoader(false)})\n    }\n\n    return <>\n        <Row>\n            {loader? <Spinner animation=\"grow\" variant={\"danger\"} style={{position: \"absolute\", top: \"50%\", left: \"50%\"}} />:<></>}\n            {boards.map((board, index) =>\n\n                <Col lg={\"4\"} key={index}>\n                    <Card>\n                        <Card.Body>\n                            <h4>{board.name}</h4>\n                        </Card.Body>\n                        <Card.Footer>\n                            <Link to={`/retro-board/${Firebase.getInstance().getLoggedInUser()!.uid}/${board.id}`}>URL</Link>\n                            <Button variant={\"link\"} className={\"pull-right\"} onClick={() => handleDelete(board)}>\n                                <i className={\"fa fa-trash-o fa-lg\"} style={{color: \"red\"}} />\n                            </Button>\n                        </Card.Footer>\n                    </Card>\n                </Col>\n            )}\n        </Row>\n\n    </>\n}\n\nexport default MyBoards","import * as React from 'react';\nimport {useState} from 'react';\nimport {Button, Form, FormGroup, FormLabel} from \"react-bootstrap\";\n\ninterface Props {\n    title: string\n    onSubmit: (textVal:string) => void\n}\nconst EditText: React.FunctionComponent<Props> = (props:Props) => {\n\n    const [showForm, setForm] = useState(false);\n    const [textVal, setTextVal] = useState(\"\");\n\n    const handleChange = (e:React.ChangeEvent<HTMLInputElement>) => {\n        setTextVal(e.currentTarget.value);\n    }\n\n    const handleSubmit = (e:React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        handleOnBlur();\n    }\n\n    const handleOnBlur = () => {\n        props.onSubmit(textVal);\n        setForm(false);\n    }\n\n    if (showForm) {\n        return <>\n            <Form onSubmit={(e:React.FormEvent<HTMLFormElement>) => handleSubmit(e)}>\n                <FormGroup>\n                    <Form.Control value={textVal} onBlur={handleOnBlur}\n                                  onChange={(e:React.ChangeEvent<HTMLInputElement>) => handleChange(e)} />\n                </FormGroup>\n            </Form>\n        </>\n    }\n\n    return <>\n        <FormLabel>\n            <span style={{fontSize: \"x-large\", fontWeight: \"bold\", marginRight: \"5px\"}}>{props.title}</span>\n            <Button variant={\"light\"} onClick={() => setForm(true)}><i className={\"fa fa-pencil-square-o\"} /></Button>\n        </FormLabel>\n    </>\n\n}\n\nexport default EditText;","import * as React from 'react';\nimport {useState} from 'react';\nimport {Dropdown, DropdownButton} from \"react-bootstrap\";\nimport {SwatchesPicker} from \"react-color\";\n\ninterface ColorPickerProps {\n    title: string\n    handleOnChangeComplete: (color: any) => void\n}\n\nconst ColorPicker: React.FunctionComponent<ColorPickerProps> = (props: ColorPickerProps) => {\n    const [color, setColor] = useState<any>(\"#ffffff\");\n    const handleChange = (color:any) => {\n        setColor(color);\n        props.handleOnChangeComplete(color);\n    }\n    return <>\n        <DropdownButton id=\"background_color_picker\" title={props.title} variant={\"light\"} >\n            <Dropdown.Item>\n                <SwatchesPicker color={color} onChangeComplete={handleChange} />\n            </Dropdown.Item>\n        </DropdownButton>\n    </>\n}\n\nexport default ColorPicker;","import React from 'react'\nimport {FormControl, InputGroup} from \"react-bootstrap\";\n\ninterface Props {\n    handleEnter: (note: string) => void,\n    noteText?: string\n}\ninterface EditorModel {\n    editorText: string\n}\n\nclass Editor extends React.Component<Props, EditorModel> {\n\n    constructor(props: Props) {\n        super(props)\n        this.handleChange = this.handleChange.bind(this)\n    }\n    \n    state: EditorModel = {\n        editorText: this.props.noteText ? this.props.noteText : \"\"\n    }\n    \n    handleKeyboardKeyPress = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n        if (e.key === 'Escape') {\n            this.props.handleEnter(this.state.editorText.replace(/\\n/g, \"\"))\n        }\n        if (e.key === 'Enter') {\n            this.setState({editorText: \"\"})\n            this.props.handleEnter(this.state.editorText.replace(/\\n/g, \"\"))\n        }\n    }\n    \n    handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n        let editorText = e.currentTarget.value\n        this.setState({editorText: editorText})\n    }\n    \n    render() {\n        return <InputGroup>\n            <FormControl as={\"textarea\"} autoFocus\n                data-testid={\"editor_textarea\"}\n                onKeyUp={this.handleKeyboardKeyPress}\n                onChange={this.handleChange} value={this.state.editorText} aria-label={\"Note Editor\"} \n                onBlur={() => this.props.handleEnter(this.state.editorText.replace(/\\n/g, \"\"))}\n                />\n        </InputGroup>\n    }\n}\n\nexport default Editor","import React from 'react'\nimport User from \"../../../models/User\";\nimport {Badge, Card} from \"react-bootstrap\";\n\ninterface LikeProps {\n    stickyNoteId: string\n    likedBy: User[]\n    handleUpVote: (user:User) => void\n}\n\ninterface LikeState {\n    users: User[]\n}\n\nclass Like extends React.Component<LikeProps, LikeState> {\n\n    state: LikeState = {\n        users: this.props.likedBy\n    }\n\n    constructor(props: LikeProps) {\n        super(props)\n        this.handleUpVote = this.handleUpVote.bind(this)\n    }\n\n    handleUpVote(e:any) {\n        e.preventDefault()\n        // get the username from localstorage\n        let user: User = this.getCurrentUser() as User\n        \n        // add the user into the state array\n        if (user) {\n            this.props.handleUpVote(user)\n        }\n    }\n\n    private getCurrentUser(): User | undefined {\n        let userJson = localStorage.getItem(User.USER_INFO)\n        if (userJson)\n            return JSON.parse(userJson)\n        else\n            console.log(\"Error: User is not logged in!\", ) // TODO: show error message\n    }\n\n    render() {\n        \n        return <div data-testid={\"like_btn\"} onClick={this.handleUpVote}>\n            <Badge variant=\"dark\" style={{cursor: \"pointer\", margin: \"0\"}}><span data-testid={\"total_votes\"}>{this.props.likedBy.length}</span></Badge>\n            <Card.Link style={{color: \"white\"}} href={\"#\"}><i data-testid={\"like_thumbs_up\"} style={{color: \"darkgrey\"}} className={\"fa fa-thumbs-up\"}></i></Card.Link>\n        </div>\n    }\n}\n\nexport default Like","import RetroBoard from \"../../models/RetroBoard\";\nimport {ActionTypes, RetroBoardActionTypes, SortType} from \"../types/RetroBoardActionTypes\";\nimport RetroWalls from \"../../models/RetroWalls\";\nimport Note from \"../../models/Note\";\nimport Notes from \"../../models/Notes\";\n\nclass RetroBoardActions {\n    \n    public createRetroBoard(retroBoard: RetroBoard): RetroBoardActionTypes {\n        return {\n            type: ActionTypes.CREATE_RETRO_BOARD,\n            payload: retroBoard\n        }\n    }\n    \n    public createRetroWalls(retroWalls: RetroWalls): RetroBoardActionTypes {\n        return {\n            type: ActionTypes.CREATE_RETRO_WALLS,\n            payload: retroWalls\n        }\n    }\n    \n    public createNote(note: Note): RetroBoardActionTypes {\n        return {\n            type: ActionTypes.CREATE_NOTE,\n            payload: note\n        }\n    }\n    \n    public updateNote(note: Note): RetroBoardActionTypes {\n        return {\n            type: ActionTypes.UPDATE_NOTE,\n            payload: note\n        }\n    }\n    \n    public deleteNote(note: Note): RetroBoardActionTypes {\n        return {\n            type: ActionTypes.DELETE_NOTE,\n            payload: note\n        }\n    }\n\n    public getNotes(notes: Notes): RetroBoardActionTypes {\n        return {\n            type: ActionTypes.GET_NOTES,\n            payload: notes\n        }\n    }\n\n    public sortByVotes(): RetroBoardActionTypes {\n        return {\n            type: ActionTypes.SORT,\n            payload: SortType.SORT_BY_VOTES\n        };\n    }\n    \n    public sortByTimestamp(): RetroBoardActionTypes {\n        return {\n            type: ActionTypes.SORT,\n            payload: SortType.SORT_BY_TIMESTAMP\n        };\n    }\n\n    public refreshRetroWalls(): RetroBoardActionTypes {\n        return {\n            type: ActionTypes.REFRESH_WALLS,\n            payload: new RetroWalls([])\n        }\n    }\n}\n\nexport default RetroBoardActions","// @ts-ignore\nimport SockJS from \"sockjs-client\";\n// @ts-ignore\nimport Stomp from 'stompjs';\nimport User from \"../../models/User\";\nimport {SERVICE_URL} from \"../../env-config\";\n\nclass DuplexCommunication {\n\n    private static instance: DuplexCommunication;\n\n    static socket: any;\n    static stomp: any;\n\n    public static getInstance() {\n        if (! DuplexCommunication.instance)\n            DuplexCommunication.instance = new DuplexCommunication();\n        if (! DuplexCommunication.instance.isConnected())\n            DuplexCommunication.instance.connect();\n        return DuplexCommunication.instance;\n    }\n\n    private connect() {\n\n        if (this.isConnected()) return;\n\n        DuplexCommunication.socket = new SockJS(`${SERVICE_URL}/retro-websocket`);\n        DuplexCommunication.stomp = Stomp.over(DuplexCommunication.socket);\n        if (! this.isConnected()) {\n            let accessToken = localStorage.getItem(User.ID_TOKEN);\n            DuplexCommunication.stomp.connect({\n                        \"Authorization\": \"Bearer \" + accessToken\n                },\n                (success:any) => { console.log(\"Connected!\"); },\n                (error:any) => {\n\n                    console.log(\"Connection lost!!! Reload the page...\", error);\n                    // window.location.reload();\n                }\n            );\n        }\n    }\n\n    private isConnected() {\n        return DuplexCommunication.socket && DuplexCommunication.stomp && DuplexCommunication.stomp.connected;\n    }\n\n    public subscribe(topic: string, callback: (data: any) => void) {\n\n        console.log(\"trying subscribing to topic...\")\n        if (!DuplexCommunication.stomp)\n            this.connect()\n\n        // wait until the websocket connection has been established\n        let subscribeInterval = setInterval(() => {\n            if (DuplexCommunication.stomp.connected) {\n                window.clearInterval(subscribeInterval);\n                DuplexCommunication.stomp.subscribe(topic, (data: any) => {\n                    callback(data);\n                });\n            }\n        }, 1000);\n\n    }\n}\n\n// @ts-ignore\nexport default DuplexCommunication;","class UnauthorizedException implements Error {\n\n    status: number|undefined\n    message: string;\n    name: string;\n\n    constructor(name: string, message:string, status:number) {\n        this.name = name;\n        this.status = status;\n        this.message = message;\n    }\n\n}\n\nexport default UnauthorizedException;","import {RetroBoardService} from \"./RetroBoardService\";\nimport Note from \"../../models/Note\";\nimport RetroBoard from \"../../models/RetroBoard\";\nimport RetroWalls from \"../../models/RetroWalls\";\nimport Notes from \"../../models/Notes\";\nimport Firebase from \"../Firebase\";\nimport RetroWall from \"../../models/RetroWall\";\nimport DuplexCommunication from \"../WebSocket/DuplexCommunication\";\nimport {request} from \"../../env-config\";\nimport {ITeam} from \"../../models/Team\";\nimport UnauthorizedException from \"../UnauthorizedException\";\n\nclass RetroBoardServiceV2 implements RetroBoardService {\n\n    private static retroBoardService: RetroBoardService;\n\n    async addNewNote(newNote: Note): Promise<Note> {\n        let response = await request.post(\"/retro-board/walls/notes\", newNote);\n\n        if (201 === response.status) {\n            // request the new retro-board from the url and return the data\n            // let newNoteData = await request.get(response.headers.location!);\n            // let note = await newNoteData.data as Note;\n            return newNote;\n        }\n\n        throw Error(\"Error creating note in the backend!\");\n    }\n\n    async createNewRetroBoard({title, maxLikes}: { title: string; maxLikes: number }): Promise<RetroBoard> {\n        let loggedInUser = await Firebase.getInstance().isUserAuthenticated();\n        if (!loggedInUser) throw Error(\"Authentication Exception! User is not logged in.\");\n\n        let response = await request.post(\"/retro-board\",\n            {name: title, maxLikes: maxLikes});\n\n        if (201 === response.status) {\n            console.log(response);\n            console.log(response.headers.location);\n            // request the new retro-board from the url and return the data\n            let retroBoardResponse = await request.get(response.headers.location!);\n            let retroBoard = await retroBoardResponse.data as RetroBoard;\n            return retroBoard;\n        }\n\n        throw Error(\"Error creating RetroBoard in the backend!\");\n    }\n\n    async createRetroWalls(retroBoardId: string, retroWalls: RetroWalls): Promise<any | RetroWalls> {\n        try {\n            let retroWallsResponse = await request.get(`/retro-board/walls/${retroBoardId}`);\n            if (retroWallsResponse.status === 200)\n                return await retroWallsResponse.data as RetroWalls;\n        } catch (e) {\n            console.log(\"Creating Retro Walls!\");\n            // it should create three walls for the given retro board\n            // let retroWalls = new RetroWalls([\n            //     RetroWall.newInstance(retroBoardId, \"Went Well\", RETRO_BOARD_STYLES.wentWell, RetroBoardServiceV2.getInstance()).setWallOrder(1),\n            //     RetroWall.newInstance(retroBoardId, \"To Improve\", RETRO_BOARD_STYLES.toImprove, RetroBoardServiceV2.getInstance()).setWallOrder(2),\n            //     RetroWall.newInstance(retroBoardId, \"Action Items\", RETRO_BOARD_STYLES.actionItems, RetroBoardServiceV2.getInstance()).setWallOrder(3),\n            // ]);\n            retroWalls.retroBoardId = retroBoardId;\n\n            let response = await request.post(`/retro-board/walls`, retroWalls);\n\n            if (201 === response.status) {\n                // it should return the url for walls\n                let retroWallsResponse = await request.get(response.headers.location!);\n                return await retroWallsResponse.data as RetroWall;\n            }\n        }\n\n    }\n\n    async deleteBoard(board: RetroBoard): Promise<string> {\n        // it should cascade delete board, walls and notes\n        let response = await request.delete(`/retro-board/${board.id}`);\n        if (204 === response.status)\n            return board.id;\n\n        throw Error(\"Error deleting retro board in the backend!\");\n    }\n\n    async deleteNote(note: Note): Promise<Note> {\n        // it should delete the individual note by id\n        let response = await request.delete(`/retro-board/walls/notes`, {\n            params: {\n                noteId: note.noteId,\n                retroBoardId: note.retroBoardId\n            }\n        });\n        if (204 === response.status) return note;\n\n        throw Error(\"Error deleting note at the backend!\");\n    }\n\n    async getDataOnUpdate(retroBoardId: string, retroWallId: string, callback: (notes: Notes) => void): Promise<void> {\n        // This code will only execute whenever a new note is created for the board\n        let duplex = DuplexCommunication.getInstance();\n        duplex.subscribe(`/topic/notes/${retroBoardId}`, async (uri:string) => {\n            let response = await request.get(`/retro-board/walls/notes`, {\n                params: {\n                    retroBoardId: retroBoardId,\n                    wallId: retroWallId,\n                }\n            });\n\n            callback(await response.data as Notes);\n        });\n\n        let response = await request.get(`/retro-board/walls/notes`, {\n            params: {\n                retroBoardId: retroBoardId,\n                wallId: retroWallId,\n            }\n        });\n\n        callback(await response.data as Notes);\n    }\n\n\n    async getMyBoards(): Promise<RetroBoard[]> {\n        let isAuth = await Firebase.getInstance().isUserAuthenticated();\n        console.log(\"IsUserAuthenticated: \" + isAuth);\n        if (isAuth) {\n            let response = await request.get(\"/retro-board\");\n            if (200 === response.status)\n                return await response.data as RetroBoard[];\n        }\n\n        throw Error(\"Error encountered while fetching boards for the user\");\n    }\n\n    getNoteWhenLiked(note: Note, callback: (note: Note) => void): Promise<void> {\n        // TODO: Requires implementation\n        return Promise.resolve();\n    }\n\n\n    async getNotes(retroBoardId: string, wallId: string): Promise<Notes> {\n        let response = await request.get(`/retro-board/walls/notes/${retroBoardId}`);\n        if (200 === response.status) {\n            let notesData = await response.data as Notes;\n            return notesData;\n        }\n        throw Error(`Encountered Error while trying to fetch notes for ${retroBoardId} > ${wallId}`);\n    }\n\n    async getRetroBoardById(uid: string, retroBoardId: string): Promise<RetroBoard> {\n        let response = await request.get(`/retro-board/${retroBoardId}`);\n        if (200 === response.status) {\n            let retroBoard = await response.data as RetroBoard;\n            return retroBoard;\n        } else if (401 === response.status) {\n            throw new UnauthorizedException(\"Unauthorized\", \"User is not authorized to view the contents of this board.\", 401);\n        }\n\n        throw Error(\"Error encountered while fetching retro board from the server\");\n    }\n\n    async getRetroBoardDataOnUpdate(uid: string, retroBoardId: string, callback: (retroBoard: RetroBoard) => void): Promise<void> {\n        // This code will only execute whenever a change is made to the retro board\n        let duplex = new DuplexCommunication();\n        duplex.subscribe(`/topic/retro-board/${retroBoardId}`, async (uri:any) => {\n            console.log(\"URI : \", uri);\n            let response = await request.get(uri.body);\n            if (response.status === 200) {\n                callback(await response.data as RetroBoard);\n            }\n        });\n    }\n\n    async getRetroWalls(retroBoardId: string): Promise<RetroWalls> {\n        let response = await request.get(`/retro-board/walls/${retroBoardId}`);\n        if (200 === response.status) {\n            let retroWalls = await response.data as RetroWalls;\n            return retroWalls;\n        }\n\n        throw Error(`Error encountered while fetching retro walls for retro board (${retroBoardId})`);\n    }\n\n    async sortByVotes(notes: Notes): Promise<Notes> {\n        let sortedByVotes = notes.notes.sort((obj1, obj2) => obj1.likedBy.length - obj2.likedBy.length);\n        return new Notes(sortedByVotes);\n    }\n\n    async updateNote(modifiedNote: Note): Promise<Note> {\n        let response = await request.put(\"/retro-board/walls/notes\", modifiedNote);\n        if (204 === response.status) return modifiedNote;\n\n        throw Error(\"Error encountered while updating note in the backend.\");\n    }\n\n    async updateRetroBoard(retroBoard: RetroBoard): Promise<RetroBoard> {\n        let response = await request.put(\"/retro-board\", retroBoard);\n        if (204 === response.status) return retroBoard;\n\n        throw Error(\"Error encountered while updating note in the backend.\");\n    }\n\n    static getInstance() {\n        if (!this.retroBoardService)\n            this.retroBoardService = new RetroBoardServiceV2();\n        return this.retroBoardService;\n    }\n\n    async shareBoard(retroBoardId: string, selectedTeams: Array<ITeam>): Promise<boolean> {\n        let response = await request.post(\"/share\", {itemId: retroBoardId, teamIds: selectedTeams.map(selectedTeam => selectedTeam.teamId)});\n        if (response.status === 201)\n            return true;\n        return false;\n    }\n}\n\nexport default RetroBoardServiceV2;","import {RetroBoardService} from \"./RetroBoardService\";\nimport RetroBoardServiceV2 from \"./RetroBoardServiceV2\";\n\nclass RetroBoardServiceFactory {\n\n    public static getInstance(): RetroBoardService {\n        return RetroBoardServiceV2.getInstance();\n    }\n}\n\nexport default RetroBoardServiceFactory;","import React, {ReactNode} from 'react'\nimport {StickyNoteProps, StickyNoteState} from \"../../../interfaces/StickyNoteModel\";\nimport Card from \"react-bootstrap/Card\";\nimport Editor from \"../../dumb/boards/Editor\";\nimport Like from \"../../dumb/boards/Like\";\nimport User from \"../../../models/User\";\nimport Note from \"../../../models/Note\";\nimport {RetroBoardActionTypes, SortType} from \"../../../redux/types/RetroBoardActionTypes\";\nimport {Dispatch} from \"redux\";\nimport RetroBoardActions from \"../../../redux/actions/RetroBoardActions\";\nimport {connect} from \"react-redux\";\nimport Badge from \"react-bootstrap/Badge\";\nimport RetroBoardState from \"../../../redux/reducers/RetroBoardState\";\nimport RetroBoard from \"../../../models/RetroBoard\";\nimport RetroWalls from \"../../../models/RetroWalls\";\nimport Notes from \"../../../models/Notes\";\nimport Toast from \"react-bootstrap/Toast\";\nimport Firebase from \"../../../service/Firebase\";\nimport {RetroBoardService} from \"../../../service/RetroBoard/RetroBoardService\";\nimport RetroBoardServiceFactory from \"../../../service/RetroBoard/RetroBoardServiceFactory\";\nimport ReactMarkdown from 'react-markdown';\nimport './sticky-note.css'\n\ninterface StateFromReduxStore {\n    retroBoard: RetroBoard\n    retroWalls: RetroWalls\n    notes: Notes\n}\n\ninterface DispatchProps {\n    updateNote: (note: Note) => Promise<RetroBoardActionTypes>\n    deleteNote: (note: Note) => Promise<RetroBoardActionTypes>\n    sortByVotes: () => Promise<RetroBoardActionTypes>\n}\n\ninterface Props extends StickyNoteProps, DispatchProps, StateFromReduxStore {\n    retroBoardService: RetroBoardService\n    sortBy?: SortType\n}\n\nclass StickyNote extends React.Component<Props, StickyNoteState> {\n\n    constructor(props: Props) {\n        super(props)\n\n        this.handleOnClick = this.handleOnClick.bind(this)\n        this.modifyStickyNote = this.modifyStickyNote.bind(this)\n        this.handleUpVote = this.handleUpVote.bind(this)\n    }\n\n    componentDidMount(): void {\n        let note = this.props.note\n        this.props.retroBoardService.getNoteWhenLiked(note, (note: Note) => {\n            if (note) // check is for delete case\n                this.props.updateNote(note)\n        })\n    }\n\n    state: StickyNoteState = {\n        showToast: false,\n        toastMessage: \"\",\n        stickyNoteId: this.props.note.noteId,\n        showEditor: false,\n        noteText: this.props.note.noteText,\n        likedBy: this.props.note.likedBy\n    }\n\n    handleOnClick(): void {\n        console.log(\"Condition: \", this.props.note.createdBy.includes(Firebase.getInstance().getLoggedInUser()!.uid));\n        console.log(`${this.props.note.createdBy} === ${Firebase.getInstance().getLoggedInUser()!.uid}`);\n        // only allow edit if the note is created by the user\n        // do not allow people to edit others note\n        if (this.props.note.createdBy.includes(Firebase.getInstance().getLoggedInUser()!.uid)) {\n            let noteText = this.state.noteText\n            this.setState({showEditor: true, noteText: noteText})\n        }\n        \n    }\n\n    modifyStickyNote(modifiedNote: Note) {\n        this.setState({showEditor: false, noteText: modifiedNote.noteText})\n        this.props.updateNote(modifiedNote)\n    }\n\n    _getTotalLikesForUser(user: User) {\n        let totalLikes = 0\n        this.props.notes.notes.forEach((note) => {\n            if (note.likedBy ? note.likedBy.some(u => u.uid === user.uid) : false) {\n                totalLikes++\n            }\n        })\n\n        return totalLikes\n    }\n\n    handleUpVote(user: User) {\n        let users = this.props.note?.likedBy || []\n        let hasVotedBefore = users.filter((u) => u.email === user.email).length > 0\n        let totalLikes = this._getTotalLikesForUser(user)\n\n        let maxAllowedLikes = this.props.retroBoard.maxLikes\n\n        if (!hasVotedBefore && totalLikes < maxAllowedLikes) {\n            users.push(user)\n            this.setState({likedBy: users})\n\n            let note = this.props.note\n            note.likedBy = users\n\n            this.props.updateNote(note).then(() => {\n                if (this.props.sortBy === SortType.SORT_BY_VOTES)\n                    this.props.sortByVotes()\n            })\n        } else {\n            this.setState({showToast: true, toastMessage: \"Like Count Limit Reached\"})\n            setTimeout(() => {\n                this.setState({showToast: false})\n            }, 2000)\n        }\n\n    }\n\n    _mergeNoteIfRequired(note: Note) : string | any {\n        let blur = this.props.retroBoard.blur === \"on\"\n        && !note.createdBy.includes(Firebase.getInstance().getLoggedInUser()!.uid) ? \"blur(3px)\" : \"blur(0px)\"\n\n        let cardBodyContent: ReactNode = <div className={\"card-text\"} style={{width: \"95%\", filter: blur}}>\n            <ReactMarkdown source={note.noteText} escapeHtml={true} />\n        </div>\n        if (note.noteText.includes(\"  \")) {\n            let mergedNotes = note.noteText.split(\"  \")\n                .map((noteText, index) => (<div key={index}>\n                    <ReactMarkdown source={noteText} escapeHtml={true} />\n                    <hr />\n                </div>))\n            cardBodyContent = <div className={\"card-text\"} style={{width: \"95%\", filter: blur}}>{mergedNotes}</div>\n        }\n\n        return cardBodyContent\n    }\n\n    render() {\n\n        let note = this.props.note\n        let cardBodyContent = this._mergeNoteIfRequired(note)\n\n        return (\n            <Card className={\"sticky-note z-depth-5\"} style={{backgroundColor: note.style?.backgroundColor || \"white\"}}>\n                <Card.Body data-testid={\"card_body\"} style={{padding: \"5px\", fontFamily: \"sans-serif\", fontWeight: 500, minHeight: \"50px\"}}\n                           onClick={this.handleOnClick}>\n                    <div data-testid={\"editor\"}\n                         style={{color: note.style?.textColor || \"black\"}}>\n                        {\n                            this.state.showEditor ?\n                                <Editor noteText={note.noteText}\n                                        handleEnter={(modifiedNoteText) => this.modifyStickyNote({\n                                            ...note,\n                                            noteText: modifiedNoteText\n                                        })}/> :\n                                cardBodyContent\n                        }\n                    </div>\n                </Card.Body>\n                <ul className={\"list-inline pull-right\"} style={{position: 'absolute', right: \"5px\", bottom: \"0px\"}}>\n                    <li className=\"list-inline-item\">\n                        <Like key={`like_note.noteId`} handleUpVote={this.handleUpVote}\n                              likedBy={note.likedBy || []}\n                              stickyNoteId={note.noteId}\n                        />\n                    </li>\n                    <li className={\"list-inline-item\"}>\n                        <Badge data-testid={`delete_badge_${note.noteId}`} variant={\"danger\"}\n                               style={{cursor: \"pointer\", padding: \"2px\", margin: \"0\"}}\n                               onClick={() => this.props.deleteNote(note)}><i\n                            className=\"fa fa-trash-o\"></i></Badge>\n                    </li>\n                </ul>\n                <Toast data-testid={\"toast\"} show={this.state.showToast} style={{position: 'absolute', left: '50%'}}>\n                    <Toast.Body>{this.state.toastMessage}</Toast.Body>\n                </Toast>\n            </Card>\n        )\n    }\n}\n\nconst mapStateToProps = (state: RetroBoardState): RetroBoardState => {\n\n    return {\n        retroBoard: state.retroBoard,\n        retroWalls: state.retroWalls,\n        notes: state.notes\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch<RetroBoardActionTypes>) => {\n    const service = RetroBoardServiceFactory.getInstance()\n    const retroBoardActions = new RetroBoardActions();\n    return {\n        updateNote: async (note: Note) => dispatch(retroBoardActions.updateNote(await service.updateNote(note))),\n        deleteNote: async (note: Note) => dispatch(retroBoardActions.deleteNote(await service.deleteNote(note))),\n        sortByVotes: async () => dispatch(retroBoardActions.sortByVotes())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StickyNote)","import {StickyNoteStyle} from \"../interfaces/StickyNoteModel\";\nimport User from \"./User\";\n\nclass Note {\n    retroBoardId: string\n    wallId: string\n    noteId: string\n    noteText: string\n    style: StickyNoteStyle\n    likedBy: User[]\n    createdBy: string\n    \n    constructor(retroBoardId: string, wallId: string, noteText:string, style:StickyNoteStyle) {\n        this.retroBoardId = retroBoardId\n        this.wallId = wallId\n        this.noteId = String(Date.now())\n        this.noteText = noteText\n        this.style = style\n        this.likedBy = []\n        this.createdBy = \"\"\n    }\n\n    public static toJSON(note:Note): string {\n        return JSON.stringify(note)\n    }\n    \n    public static fromJSON(json:string): Note {\n        return JSON.parse(json)\n    }\n\n    \n}\n\nexport default Note","import * as React from \"react\";\nimport {Button, Col, Row} from \"react-bootstrap\";\nimport StickyNote from \"../../smart/boards/StickyNote\";\nimport {SortType} from \"../../../redux/types/RetroBoardActionTypes\";\nimport RetroBoardServiceFactory from \"../../../service/RetroBoard/RetroBoardServiceFactory\";\nimport BoardTemplate from \"../../../models/BoardTemplate\";\nimport Note from \"../../../models/Note\";\n\ninterface DisplayProps {\n    boardTemplate: BoardTemplate\n    removeWall: (index: number) => void\n}\n\nconst DisplayBoardTemplate: React.FunctionComponent<DisplayProps> = ({boardTemplate, removeWall}) => {\n\n    return <>\n        <Row>\n            {boardTemplate.walls.map((wall, index) => (\n                <Col key={index} className={\"justify-content-center text-center\"}>\n                    <h6>{wall.wallTitle} <Button onClick={() => removeWall(index)} variant={\"link\"}><i\n                        className={\"fa fa-times\"}/></Button></h6>\n                    {\n                        wall?.notes?.length > 0 ? wall.notes.map((note, index) => (\n                            <StickyNote key={index} note={new Note(\"\",\"\", note.noteText, note.noteStyle)} sortBy={SortType.NONE}\n                                        retroBoardService={RetroBoardServiceFactory.getInstance()}/>\n                        )) : <StickyNote key={index} note={new Note(\"\",\"\", \"Foo Bar\", wall.wallStyle.stickyNote)} sortBy={SortType.NONE}\n                                         retroBoardService={RetroBoardServiceFactory.getInstance()}/>\n                    }\n\n                </Col>\n            ))}\n        </Row>\n    </>\n}\n\nexport default DisplayBoardTemplate;","import * as React from 'react';\nimport {useState} from 'react';\nimport {Button, Col, Form, FormGroup, Modal, Row} from \"react-bootstrap\";\nimport {RETRO_BOARD_STYLES} from \"../../../models/RetroBoard\";\nimport './style.css';\nimport BoardTemplate, {TemplateWall} from \"../../../models/BoardTemplate\";\nimport EditText from \"../../dumb/EditText\";\nimport ColorPicker from \"../../dumb/ColorPicker\";\nimport DisplayBoardTemplate from \"./DisplayBoardTemplate\";\nimport Firebase from \"../../../service/Firebase\";\n\ninterface Props {\n    onCreateTemplate: (templateData: BoardTemplate) => void\n}\n\nconst CreateNewTemplate: React.FunctionComponent<Props> = (props: Props) => {\n\n    const [show, setShow] = useState(false);\n    const showModal = () => setShow(true);\n    const hideModal = () => setShow(false);\n\n    const [boardTemplate, setBoardTemplate] = useState<BoardTemplate>({\n        templateTitle: \"Template Title\",\n        walls: [],\n        templateId: \"\",\n        userId: Firebase.getInstance().getLoggedInUser()?.uid!\n    });\n    // const [retroWalls, setRetroWalls] = useState<RetroWalls>(new RetroWalls([]));\n    const [wallTitle, setWallTitle] = useState(\"\");\n    // const [notes, setNotes] = useState<Notes>(new Notes([]));\n    const [textColor, setTextColor] = useState<any>(\"#ffffff\");\n    const [backgroundColor, setBackgroundColor] = useState<any>(RETRO_BOARD_STYLES.wentWell.stickyNote.backgroundColor);\n\n    const updateTemplateTitle = (title: string) => {\n        setBoardTemplate({...boardTemplate, templateTitle: title});\n    }\n\n    const handleWallName = (e: React.ChangeEvent<HTMLInputElement>) => setWallTitle(e.currentTarget.value);\n    const addWall = () => {\n        let newTemplateWall: TemplateWall = {\n            wallTitle: wallTitle,\n            wallStyle: {\n                stickyNote: {\n                    backgroundColor: backgroundColor,\n                    textColor: textColor,\n                    likeBtnPosition: \"right\"\n                }\n            },\n            wallOrder: 1,\n            notes: [\n                {\n                    noteText: \"Lorem Epsum Dolor Sit amet\",\n                    noteStyle: {\n                        backgroundColor: backgroundColor,\n                        textColor: textColor,\n                        likeBtnPosition: \"right\"\n                    }\n                }\n            ]\n        };\n\n        setBoardTemplate({...boardTemplate, walls: [...boardTemplate.walls, newTemplateWall]});\n        setWallTitle(\"\");\n    }\n\n    const removeWall = (index: number) => {\n        setBoardTemplate({\n            ...boardTemplate,\n            walls: [...boardTemplate.walls.slice(0, index), ...boardTemplate.walls.slice(index + 1)]\n        })\n    }\n\n    const handleTextColor = (color: any) => setTextColor(color.hex)\n    const handleBackgroundColor = (color: any) => setBackgroundColor(color.hex);\n    const createTemplate = () => {\n\n        const payload:BoardTemplate = {...boardTemplate,\n            walls: boardTemplate.walls.map((wall, index) => {\n                return {...wall, wallOrder: index};\n            })}\n\n        props.onCreateTemplate(payload);\n        hideModal();\n    }\n\n    return <>\n        <Button variant={\"light\"} onClick={showModal} style={{padding: \"25px\", border: \"2px dashed\"}}>\n            <i className={\"fa fa-plus fa-lg\"}/>\n        </Button>\n        <Modal show={show} onHide={hideModal} dialogClassName={\"custom-modal\"}>\n            <Modal.Header>\n                <EditText onSubmit={(text) => updateTemplateTitle(text)} title={boardTemplate.templateTitle}/>\n            </Modal.Header>\n            <Modal.Body>\n                <Row>\n                    <FormGroup>\n                        <Row>\n                            <Form inline={true} onSubmit={(e: any) => e.preventDefault()}>\n                                <Col>\n                                    <Form.Control\n                                        placeholder={\"Wall Title\"}\n                                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleWallName(e)}\n                                        value={wallTitle}\n                                        style={{padding: \"20px\", marginLeft: \"5px\"}}\n                                    />\n                                </Col>\n                                <Col style={{backgroundColor: textColor}}>\n                                    <ColorPicker title={\"Text Color\"} handleOnChangeComplete={handleTextColor}/>\n                                </Col>\n                                <Col style={{backgroundColor: backgroundColor}}>\n                                    <ColorPicker title={\"Background Color\"}\n                                                 handleOnChangeComplete={handleBackgroundColor}/>\n                                </Col>\n                                <Col>\n                                    <Button onClick={addWall} disabled={wallTitle === \"\"}>Add Wall</Button>\n                                </Col>\n                            </Form>\n                            <hr/>\n                        </Row>\n                    </FormGroup>\n                </Row>\n\n                <div style={{border: \"1px solid\", padding: \"20px\", margin: \"1px solid\"}}>\n                    <DisplayBoardTemplate boardTemplate={boardTemplate} removeWall={removeWall} />\n                </div>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant={\"success\"} disabled={boardTemplate.walls.length === 0} onClick={createTemplate}>Create\n                    Template</Button>\n                <Button variant={\"light\"} onClick={hideModal}>Cancel</Button>\n            </Modal.Footer>\n        </Modal>\n    </>\n}\n\nexport default CreateNewTemplate;","import React, {FunctionComponent, useState} from 'react'\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Form from \"react-bootstrap/Form\";\n\ninterface Props {\n    title:string\n    onCreateRetroBoard: (retroBoard:{title:string,maxLikes:number}) => void\n}\n\nconst CreateRetroBoard: FunctionComponent<Props> = ({onCreateRetroBoard, title}) => {\n    const [show, setShow] = useState(false)\n    const [formInput, setFormInput] = useState({title: \"\", maxLikes: 5})\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n    const handleChange = (name: string) => (e: React.ChangeEvent<HTMLInputElement>) => {\n        let value = e.currentTarget.value\n        setFormInput({...formInput, [name]: value})\n    }\n    const handleCreateRetroBoard = async () => {\n        onCreateRetroBoard(formInput);\n        handleClose();\n    }\n    \n    return <>\n        <Button variant=\"outline-primary\" onClick={handleShow}>\n            {title}\n        </Button>\n\n        <Modal show={show} onHide={handleClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>{title}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Form>\n                    <Form.Group>\n                        <Form.Label>Dashboard Title</Form.Label>\n                        <Form.Control name={\"title\"} type={\"text\"} placeholder={\"e.g. Spring 400 \"}\n                                      value={formInput.title} autoComplete={\"false\"}\n                                      onChange={handleChange(\"title\")}/>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Label>Max Likes</Form.Label>\n                        <Form.Control name={\"maxLikes\"} type={\"number\"} placeholder={\"e.g. 5 or 6 \"}\n                                      onChange={handleChange(\"maxLikes\")} \n                                      autoComplete={\"false\"}\n                                      value={String(formInput.maxLikes)}/>\n                    </Form.Group>\n                </Form>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={handleClose}>\n                    Close\n                </Button>\n                <Button variant=\"primary\" onClick={handleCreateRetroBoard}>\n                    Save Changes\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    </>\n}\n\nexport default CreateRetroBoard","import {WallStyle} from \"../interfaces/StickyWallModel\";\n\nclass RetroWall {\n    retroBoardId: string\n    wallId: string\n    title: string\n    style: WallStyle\n    sortCards: boolean\n    wallOrder: number = 1\n\n    constructor(retroBoardId:string, title: string, style: WallStyle) {\n        this.retroBoardId = retroBoardId\n        this.wallId = title.replace(/\\s/g, \"\")\n        this.title = title\n        this.style = style\n        this.sortCards = false\n    }\n    \n    public static newInstance(retroBoardId:string, title:string, style: WallStyle) {\n        return new RetroWall(retroBoardId, title, style)\n    }\n\n    public setWallOrder(wallOrder:number): RetroWall {\n        this.wallOrder = wallOrder;\n        return this;\n    }\n\n    \n}\n\nexport default RetroWall","import * as React from 'react';\nimport CreateRetroBoard from \"./CreateRetroBoard\";\nimport {RetroBoardService} from \"../../../service/RetroBoard/RetroBoardService\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport RetroWalls from \"../../../models/RetroWalls\";\nimport RetroWall from \"../../../models/RetroWall\";\nimport {useDispatch} from \"react-redux\";\nimport RetroBoardActions from \"../../../redux/actions/RetroBoardActions\";\nimport {TemplateWall} from \"../../../models/BoardTemplate\";\n\ninterface Props extends RouteComponentProps {\n    title: string\n    retroBoardService: RetroBoardService;\n    templateWalls: Array<TemplateWall>\n}\n\nconst CreateBoardManager: React.FunctionComponent<Props> = (props: Props) => {\n    const dispatch = useDispatch();\n\n    const handleCreateRetroBoard = async (boardInput: { title: string, maxLikes: number }) => {\n        let retroBoardActions = new RetroBoardActions();\n        let retroBoard = await props.retroBoardService.createNewRetroBoard(boardInput);\n        dispatch(retroBoardActions.createRetroBoard(retroBoard));\n\n        console.log(\"Template Walls -> \", props.templateWalls);\n\n        let boardWalls = await props.retroBoardService.createRetroWalls(retroBoard.id, new RetroWalls(\n            props.templateWalls.map((templateWall, index) =>\n                RetroWall.newInstance(retroBoard.id, templateWall.wallTitle, templateWall.wallStyle)\n                    .setWallOrder(templateWall.wallOrder))));\n\n        props.history.push({\n            pathname: `/retro-board/${retroBoard.userId}/${retroBoard.id}`,\n            state: {walls: new RetroWalls(boardWalls)}\n        });\n    }\n\n    return <>\n        <CreateRetroBoard title={props.title} onCreateRetroBoard={handleCreateRetroBoard}/>\n    </>\n}\n\nexport default withRouter(CreateBoardManager);","import * as React from 'react';\nimport {useEffect, useState} from 'react';\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport CreateNewTemplate from \"../../dumb/templates/CreateNewTemplate\";\nimport BoardTemplate from \"../../../models/BoardTemplate\";\nimport TemplateService from \"../../../service/Templates/TemplateService\";\nimport {Button, Card, Col, Row} from \"react-bootstrap\";\nimport {RetroBoardService} from \"../../../service/RetroBoard/RetroBoardService\";\nimport CreateRetroBoardManager from \"../boards/CreateRetroBoardManager\";\nimport DisplayBoardTemplate from \"../../dumb/templates/DisplayBoardTemplate\";\n\ninterface Props extends RouteComponentProps {\n    templateService: TemplateService\n    retroBoardService: RetroBoardService\n}\n\nconst TemplateManager: React.FunctionComponent<Props> = (props: Props) => {\n\n    const [templates, setTemplates] = useState<Array<BoardTemplate>>([]);\n\n    const handleCreateTemplate = async (boardTemplate: BoardTemplate) => {\n        let persistedBoardTemplate = await props.templateService.createBoardTemplate(boardTemplate)\n        setTemplates([...templates, persistedBoardTemplate]);\n    };\n\n    const deleteTemplate = async (boardTemplate: BoardTemplate) => {\n        await props.templateService.deleteBoardTemplate(boardTemplate);\n        setTemplates(templates.filter(template => template.templateId !== boardTemplate.templateId));\n    }\n\n    useEffect(() => {\n        props.templateService.getBoardTemplates()\n            .then(boardTemplates => {\n                setTemplates(boardTemplates.templates);\n            });\n    }, [props.templateService]);\n\n    return <>\n        <Row>\n            <Col md={1}>\n                <CreateNewTemplate onCreateTemplate={handleCreateTemplate}/>\n            </Col>\n\n            {templates.map((template, index) => (\n                <Col key={index} md={3}>\n                    <Card>\n                        <Card.Body>\n                                <div key={index}>\n                                    <Card.Title>{template.templateTitle}</Card.Title>\n                                    <DisplayBoardTemplate boardTemplate={template}\n                                                          removeWall={(index) => console.log(\"Test Button Clicked!\")}/>\n                                </div>\n                        </Card.Body>\n                        <Card.Footer>\n                            <CreateRetroBoardManager title={\"Create Board\"}\n                                                     retroBoardService={props.retroBoardService}\n                                                     templateWalls={template.walls}/>\n\n                            <Button className={\"pull-right\"} variant={\"light\"} onClick={() => deleteTemplate(template)}>\n                                <i className={\"fa fa-trash-o fa-lg\"} style={{color: \"red\"}}/>\n                            </Button>\n                        </Card.Footer>\n                    </Card>\n                </Col>\n            ))}\n\n        </Row>\n\n    </>\n}\n\nexport default withRouter(TemplateManager);","import React from 'react';\nimport {HomePageModel} from \"../interfaces/HomePageModel\"\nimport {Col, Container, Row} from \"react-bootstrap\"\nimport MyBoards from \"../components/smart/boards/MyBoards\";\nimport TemplateManager from \"../components/smart/templates/TemplateManager\";\nimport {RETRO_BOARD_STYLES} from \"../models/RetroBoard\";\nimport CreateRetroBoardManager from \"../components/smart/boards/CreateRetroBoardManager\";\n\nclass HomePage extends React.Component<HomePageModel> {\n\n    componentDidMount(): void {\n        document.title = \"Home\";\n    }\n\n    render() {\n\n        return <Container>\n            <Row>\n                <Col>\n                    <div className={\"pb-2 mt-4 mb-2 border-bottom\"}>\n                        <h3>Pre-built Templates</h3>\n                    </div>\n                    <CreateRetroBoardManager title={\"Create Retro Board\"}\n                                             retroBoardService={this.props.retroBoardService} templateWalls={[\n                        {wallTitle: \"Went Well\", wallStyle: RETRO_BOARD_STYLES.wentWell, wallOrder: 1, notes: []},\n                        {wallTitle: \"To Improve\", wallStyle: RETRO_BOARD_STYLES.toImprove, wallOrder: 2, notes: []},\n                        {wallTitle: \"Action Items\", wallStyle: RETRO_BOARD_STYLES.actionItems, wallOrder: 3, notes: []}\n                    ]}/>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <div className={\"pb-2 mt-4 mb-2 border-bottom\"}>\n                        <h3>My Templates</h3>\n                    </div>\n                    <TemplateManager retroBoardService={this.props.retroBoardService}\n                                     templateService={this.props.templateService}/>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <div className={\"pb-2 mt-4 mb-2 border-bottom\"}>\n                        <h3>My Boards</h3>\n                    </div>\n                    <MyBoards retroBoardService={this.props.retroBoardService}/>\n                </Col>\n            </Row>\n        </Container>\n    }\n}\n\nexport default HomePage","import React from 'react'\nimport {Button} from \"react-bootstrap\";\nimport Editor from \"./Editor\";\n\ninterface State {\n    showEditor: boolean\n}\n\ninterface Props {\n    addNote: (note: string) => void\n}\n\nclass AddNewNote extends React.Component<Props, State> {\n\n    state: State = {\n        showEditor: false\n    }\n    \n    constructor(props: Props) {\n        super(props)\n        this.showEditor = this.showEditor.bind(this)\n        this.handleEnter = this.handleEnter.bind(this)\n    }\n\n    showEditor() {\n        \n        this.setState({showEditor: true})\n    }\n    \n    handleEnter(note: string) {\n        if (\"\" === note)\n            return ;\n        this.props.addNote(note)\n        this.setState({showEditor: false})\n    }\n\n    render() {\n        if (this.state.showEditor) {\n            return <div style={{margin: \"5px\"}}>\n                <Editor handleEnter={this.handleEnter} />\n            </div>\n        }\n        return <div style={{margin: \"5px\"}}>\n            <Button title={\"Add new note\"} data-testid={\"add_new_note_btn\"} variant={\"dark\"} onClick={this.showEditor}>\n                <i className={\"fa fa-lg fa-plus\"}></i>\n            </Button>\n        </div>\n    }\n}\n\nexport default AddNewNote","import * as React from 'react'\nimport {useState} from 'react'\nimport {Button, Carousel, Modal} from \"react-bootstrap\";\n\ninterface Props {\n    items: Array<string>\n    style: {textColor: string, backgroundColor: string}\n}\n\nconst CarouselView: React.FunctionComponent<Props> = (props: Props) => {\n\n    const [carouselView, setCarouselView] = useState(false);\n    const [index, setIndex] = useState(0);\n\n    const handleSelect = (selectedIndex: number) => setIndex(selectedIndex);\n\n    const showCarouselView = () => setCarouselView(true);\n\n    const hideCarouselView = () => setCarouselView(false);\n\n    const formatText = (text: string) => {\n        if (! text.includes(\"<MERGE_NOTE>\")) {\n            return <span>{text}</span>\n        }\n\n        return text.split(\"<MERGE_NOTE>\")\n            .map((noteText, index) => (\n                <span key={index}>\n                        {noteText}\n                    <br/>\n                        <hr style={{borderTop: \"1px dashed\"}}/>\n                </span>));\n    }\n\n    return <>\n        <div style={{margin: \"5px\"}}>\n            <Button title={\"Retrospect\"} variant={\"link\"} onClick={showCarouselView}>\n                <i className={\"fa fa-lg fa-eye\"} />\n            </Button>\n        </div>\n\n        <>\n            <Modal show={carouselView} onHide={hideCarouselView} style={{backgroundColor: \"black\"}}>\n                <Modal.Body style={{backgroundColor: props.style.backgroundColor}}>\n                    <Carousel activeIndex={index} onSelect={handleSelect} interval={null}>\n                        {props.items.map((text, index) => (\n                            <Carousel.Item key={index}>\n                                <div style={{height: \"400px\"}}>\n                                    <Carousel.Caption style={{color: props.style.textColor}}>\n                                        <div style={{height: \"200px\", overflowY: \"scroll\"}}>\n                                            <h3 style={{overflowY: \"scroll\"}}>{formatText(text)}</h3>\n                                        </div>\n                                    </Carousel.Caption>\n                                </div>\n                            </Carousel.Item>\n                        ))}\n                    </Carousel>\n                </Modal.Body>\n            </Modal>\n        </>\n    </>\n}\n\nexport default CarouselView;","import React, {Component} from 'react'\nimport StickyNote from \"./StickyNote\";\nimport {StickyWallModel} from \"../../../interfaces/StickyWallModel\";\nimport AddNewNote from \"../../dumb/boards/AddNewNote\";\nimport {Col, ListGroup, ListGroupItem, Row} from \"react-bootstrap\";\nimport Note from \"../../../models/Note\";\nimport Firebase from \"../../../service/Firebase\";\nimport RetroWall from \"../../../models/RetroWall\";\nimport {connect} from \"react-redux\";\nimport {Dispatch} from 'redux'\nimport {RetroBoardActionTypes, SortType} from \"../../../redux/types/RetroBoardActionTypes\";\nimport RetroBoardActions from \"../../../redux/actions/RetroBoardActions\";\nimport RetroBoardServiceFactory from \"../../../service/RetroBoard/RetroBoardServiceFactory\";\nimport {RetroBoardService} from \"../../../service/RetroBoard/RetroBoardService\";\nimport CarouselView from \"../../dumb/CarouselView\";\n\ninterface State {\n    notes: Note[]\n}\n\ninterface DispatchProps {\n    addNewNote: (note: Note) => Promise<RetroBoardActionTypes>\n    updateNote: (note: Note) => Promise<RetroBoardActionTypes>\n    getNotes: (retroBoardId: string, wallId: string) => Promise<RetroBoardActionTypes>\n    deleteNote: (note: Note) => Promise<RetroBoardActionTypes>\n    sortByVotes: () => Promise<RetroBoardActionTypes>\n}\n\ninterface Props extends StickyWallModel, State, DispatchProps {\n    sortBy?: SortType\n    retroBoardService: RetroBoardService\n}\n\nclass StickyWall extends Component<Props, State> {\n\n    retroWall: RetroWall\n\n    constructor(props: Props) {\n        super(props)\n        this.addNote = this.addNote.bind(this)\n        this.retroWall = props.retroWall\n        this.handleDragStart = this.handleDragStart.bind(this)\n        this.handleDrop = this.handleDrop.bind(this)\n        this.handleDragOver = this.handleDragOver.bind(this)\n    }\n\n    state: State = {\n        notes: [],\n    }\n\n    componentDidMount(): void {\n        this.props.getNotes(this.retroWall.retroBoardId, this.retroWall.wallId);\n        this.props.retroBoardService.getDataOnUpdate(this.retroWall.retroBoardId, this.retroWall.wallId, () => {\n            console.log(\"Data Changed!\")\n            this.props.getNotes(this.retroWall.retroBoardId, this.retroWall.wallId)\n        })\n    }\n\n    addNote(note: string) {\n        let newNote = new Note(this.retroWall.retroBoardId, this.retroWall.wallId, note, {\n            backgroundColor: this.retroWall.style?.stickyNote?.backgroundColor || \"white\",\n            textColor: this.retroWall.style?.stickyNote?.textColor || \"black\",\n            likeBtnPosition: this.retroWall.style?.stickyNote?.likeBtnPosition || \"right\"\n        })\n        newNote.createdBy = Firebase.getInstance().getLoggedInUser()!.email;\n        this.props.addNewNote(newNote).then(() => {\n            this.props.sortByVotes()\n        })\n    }\n    \n    handleDrop(e: React.DragEvent<HTMLAnchorElement>, droppedOnNote: Note) {\n        const draggedNote = JSON.parse(e.dataTransfer.getData(\"text/plain\")) as Note\n        if (draggedNote.noteId === droppedOnNote.noteId)\n            return\n            \n        droppedOnNote.noteText += \"  \" + draggedNote.noteText; // markdown for line-break\n        this.props.updateNote({...droppedOnNote}).then(() => {\n            this.props.deleteNote(draggedNote)\n        })\n    } \n    \n    handleDragOver(e: React.DragEvent<HTMLAnchorElement>) {\n        e.preventDefault()\n        e.dataTransfer.dropEffect = \"move\"\n    }\n    \n    handleDragStart(e: React.DragEvent<HTMLAnchorElement>, note: Note) {\n        e.dataTransfer.setData(\"text/plain\", JSON.stringify(note))\n    }\n\n    render() {\n        const {notes} = this.props\n\n        let wallNotes = notes.filter((note) => note.wallId === this.retroWall.wallId);\n        let stickers = wallNotes.map((stickyNote: Note, index: number) => (\n            <ListGroupItem key={index} style={{padding: \"0px\", border: \"none\", marginBottom: \"2px\"}} \n                className={\"text-left\"}\n                id={`list_group_item_${index}`}\n                draggable={true}\n                onDragStart={(e: React.DragEvent<HTMLAnchorElement>) => this.handleDragStart(e, stickyNote)}\n                onDragOver={this.handleDragOver}\n                onDrop={(e: React.DragEvent<HTMLAnchorElement>) => this.handleDrop(e, stickyNote)}\n                >\n                <StickyNote key={stickyNote.noteId} note={stickyNote} retroBoardService={this.props.retroBoardService} sortBy={this.props.sortBy}/>\n            </ListGroupItem>\n\n        ))\n\n\n        return (\n            <section className=\"sticky-wall text-center\">\n                <h3>{this.retroWall.title} </h3>\n                <Row>\n                    <Col>\n                        <CarouselView items={wallNotes.map(note => note.noteText)} style={{textColor: wallNotes[0]?.style.textColor, backgroundColor: wallNotes[0]?.style.backgroundColor}} />\n                    </Col>\n                </Row>\n                <AddNewNote addNote={this.addNote}/>\n                <ListGroup>\n                    {stickers}\n                </ListGroup>\n            </section>\n        )\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch<RetroBoardActionTypes>) => {\n    const service = RetroBoardServiceFactory.getInstance()\n    const retroBoardActions = new RetroBoardActions();\n    \n    return {\n        addNewNote: async (note: Note) => dispatch(retroBoardActions.createNote(await service.addNewNote(note))),\n        updateNote: async (note: Note) => dispatch(retroBoardActions.updateNote(await service.updateNote(note))),\n        deleteNote: async (note: Note) => dispatch(retroBoardActions.deleteNote(await service.deleteNote(note))),\n        getNotes: async (retroBoardId: string, wallId: string) => dispatch(retroBoardActions.getNotes(await service.getNotes(retroBoardId, wallId))),\n        sortByVotes: async () => dispatch(retroBoardActions.sortByVotes())\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(StickyWall)\n\n\n/*\n       // this method is called whenever there is a change in the properties\n       public static getDerivedStateFromProps(props: StickyWallModel, state: State) {\n           if (props.sortCards) {\n               let notes = [...props.stickyNotes]\n               notes = notes.sort((a, b) => {\n                   if (a.likedBy.length > b.likedBy.length)\n                       return -1\n                   if (a.likedBy.length < b.likedBy.length)\n                       return 1\n                   return 0\n               }).slice()\n               return {notes: notes}\n           }\n       }\n   */","import * as React from 'react'\nimport {useState} from 'react'\nimport {Alert, Button, Form, FormGroup, Modal, ProgressBar} from \"react-bootstrap\";\nimport {ITeam} from \"../../models/Team\";\n\ninterface Props {\n    teams: Array<ITeam>\n    shareWith: (selectedTeams: Array<ITeam>) => Promise<boolean>\n}\n\nconst ShareBoard: React.FunctionComponent<Props> = (props: Props) => {\n    const teams = props.teams ? props.teams : [];\n\n    const [show, setShow] = useState(false);\n    const handleClose = () => setShow(false);\n    const handleOpen = () => setShow(true);\n    const [pageLoader, setPageLoader] = useState(false);\n    const [selectedTeams, setSelectedTeams] = useState<Array<ITeam>>([]);\n    const [response, setResponse] = useState<React.ReactNode>(undefined);\n\n    const handleChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n        const selectedItems = e.currentTarget.selectedOptions;\n        const selectedTeams: Array<ITeam> = [];\n        for (let index = 0; index < selectedItems.length; index++) {\n            selectedTeams.push(\n                props.teams.find((team) => team.teamId === selectedItems[index].value)!\n            );\n        }\n\n        setSelectedTeams(selectedTeams);\n    }\n\n    const handleSubmit = async () => {\n        setPageLoader(true);\n        let response = await props.shareWith(selectedTeams);\n        if (response === true) {\n            setResponse(\n                <Alert variant={\"success\"}>\n                    <i className={\"fa fa-check\"} style={{color: \"green\"}}/>\n                    Page is now shared with the selected teams.\n                </Alert>\n            )\n        } else {\n            setResponse(<Alert variant={\"danger\"}>Cannot share the page. Contact admin.</Alert>)\n        }\n        setPageLoader(false);\n    }\n\n    return <>\n        <Button style={{border: \"1px solid black\"}} variant={\"light\"} onClick={handleOpen}>\n            <i className={\"fa fa-share-alt\"}/>\n        </Button>\n\n        <Modal show={show} onHide={handleClose}>\n            <Modal.Body>\n                <Form onSubmit={handleSubmit}>\n                    <FormGroup>\n                        <Form.Label><h3>Share with:</h3></Form.Label>\n                        <Form.Control as={\"select\"} multiple\n                                      onChange={(e: React.ChangeEvent<HTMLSelectElement>) => handleChange(e)}>\n                            <option disabled={true}>Select teams to share</option>\n                            {teams.map((team, index) => (\n                                <option key={index} value={team.teamId}>{team.teamName}</option>\n                            ))}\n                        </Form.Control>\n                    </FormGroup>\n                    <FormGroup>\n                        <Button type={\"submit\"} variant={\"success\"}>Share</Button>\n                        <Button onClick={handleClose} variant={\"light\"}>Cancel</Button>\n                    </FormGroup>\n                </Form>\n            </Modal.Body>\n            {pageLoader ? <Modal.Footer>\n                {pageLoader ? <><ProgressBar animated={true}/>{response}</> : <>{response}</>}\n            </Modal.Footer> : <>{response}</>}\n\n        </Modal>\n    </>\n}\n\nexport default ShareBoard","import React, {useState} from 'react'\nimport {Dispatch} from 'redux'\nimport StickyWall from \"../components/smart/boards/StickyWall\";\nimport {Button, Col, Form, FormControl, InputGroup, Row} from \"react-bootstrap\";\nimport {RouteComponentProps} from \"react-router\";\nimport RetroBoard from \"../models/RetroBoard\";\nimport RetroWalls from \"../models/RetroWalls\";\nimport {connect, TypedUseSelectorHook, useDispatch, useSelector as useReduxSelector} from 'react-redux'\nimport RetroBoardState from \"../redux/reducers/RetroBoardState\";\nimport {RetroBoardActionTypes, SortType} from \"../redux/types/RetroBoardActionTypes\";\nimport RetroBoardActions from \"../redux/actions/RetroBoardActions\";\nimport Notes from \"../models/Notes\";\nimport {CSVLink} from \"react-csv\";\nimport {Data, LabelKeyObject} from \"react-csv/components/CommonPropTypes\";\nimport {RetroBoardService} from \"../service/RetroBoard/RetroBoardService\";\nimport Firebase from \"../service/Firebase\";\nimport ShareBoard from \"../components/dumb/ShareBoard\";\nimport TeamsServiceV1 from \"../service/Teams/TeamsServiceV1\";\nimport {ITeam} from \"../models/Team\";\nimport UnauthorizedException from \"../service/UnauthorizedException\";\n\ninterface PropsFromParent extends RouteComponentProps<{}, any, { walls: RetroWalls } | any> {\n    uid?: string\n    retroBoardId?: string\n    retroBoardService: RetroBoardService\n    teamsService: TeamsServiceV1\n}\n\ninterface StateFromReduxStore {\n    retroBoard: RetroBoard\n    retroWalls: RetroWalls\n    notes: Notes\n}\n\ninterface DispatchProps {\n    createRetroBoard: (retroBoard: RetroBoard) => Promise<RetroBoardActionTypes>\n    createRetroWalls: (retroWalls: RetroWalls) => Promise<RetroBoardActionTypes>\n    refreshRetroWalls: () => Promise<RetroBoardActionTypes>\n}\n\ntype Props = PropsFromParent & StateFromReduxStore & DispatchProps\n\ninterface State {\n    retroBoardId: string\n    sortSelectValue: SortType\n    teams: Array<ITeam>\n    retroWalls: RetroWalls\n}\n\nconst SortSelect: React.FunctionComponent = () => {\n    const retroBoardActions = new RetroBoardActions()\n    const dispatch = useDispatch()\n    const [sortSelectValue, setSortSelectValue] = useState(SortType.NONE)\n\n    const handleSort = function (e: React.ChangeEvent<HTMLSelectElement>): void {\n        let sortBy = e.target.value\n        if (sortBy === String(SortType.SORT_BY_VOTES)) {\n            dispatch(retroBoardActions.sortByVotes())\n            setSortSelectValue(SortType.SORT_BY_VOTES)\n        }\n    }\n\n    return <Form>\n        <Form.Group>\n            <Form.Label>Sort cards: </Form.Label>\n            <FormControl as={\"select\"} onChange={handleSort} data-testid={\"sort_select\"}\n                         value={String(sortSelectValue)}>\n                <option defaultValue={String(SortType.NONE)}>select...</option>\n                <option defaultValue={String(SortType.SORT_BY_VOTES)}\n                        value={SortType.SORT_BY_VOTES}>Sort by Up-votes\n                </option>\n            </FormControl>\n        </Form.Group>\n    </Form>\n}\n\nconst BlurToggle: React.FunctionComponent<Props> = (props: Props) => {\n    const useSelector: TypedUseSelectorHook<RetroBoardState> = useReduxSelector\n    const retroBoardState = useSelector(state => state)\n    const retroBoardActions = new RetroBoardActions()\n    const dispatch = useDispatch()\n\n    // if the board is not created by the logged in user\n    // then do not show the blur feature\n    if (props.retroBoard.userId !== Firebase.getInstance().getLoggedInUser()!.uid) {\n        return <></>\n    }\n\n    const handleChange = async (val: \"on\" | \"off\") => {\n        console.log(\"Value: \", val)\n\n        let retroBoard: RetroBoard = {...retroBoardState.retroBoard}\n        retroBoard.blur = val\n        dispatch(retroBoardActions.createRetroBoard(await props.retroBoardService.updateRetroBoard(retroBoard)))\n    }\n\n    let isChecked = props.retroBoard.blur === \"on\" ? true : false;\n\n    return <InputGroup className={\"pull-right\"}>\n        <Form.Check\n            checked={isChecked}\n            type={\"switch\"}\n            id={\"switch_on\"}\n            label={\"Blur On\"}\n            onChange={() => handleChange(isChecked ? \"off\" : \"on\")}\n        />\n    </InputGroup>\n}\n\nclass RetroBoardPage extends React.Component<Props, State> {\n\n    state: State = {\n        retroBoardId: \"\",\n        sortSelectValue: SortType.NONE,\n        teams: [],\n        retroWalls: new RetroWalls([])\n    }\n\n    constructor(props: Props) {\n        super(props)\n        this.convertJsonToCsv = this.convertJsonToCsv.bind(this)\n        this.shareBoardWith = this.shareBoardWith.bind(this)\n    }\n\n    componentDidMount(): void {\n        const {retroBoardId, uid} = this.props.match.params as PropsFromParent\n        localStorage.setItem(\"retroBoardId\", retroBoardId!)\n\n        if (retroBoardId && uid) {\n            this.initRetroBoard(retroBoardId, uid);\n        }\n\n    }\n\n    private async initRetroBoard(retroBoardId: string, uid: string) {\n        try {\n\n            let retroBoard = await this.props.retroBoardService.getRetroBoardById(uid, retroBoardId);\n            document.title = retroBoard.name;\n\n            let teams = this.props.teamsService.getMyTeams();\n\n            // open duplex connection\n            // this method is only called when there is some update in the backend\n            await this.props.retroBoardService.getRetroBoardDataOnUpdate(uid, retroBoardId, (retroBoard => {\n                console.log(\"RetroBoard: \", retroBoard);\n            }));\n\n            await this.props.createRetroBoard(retroBoard);\n            let retroWalls = await this.props.retroBoardService.getRetroWalls(retroBoardId);\n\n            this.setState({retroBoardId: retroBoardId, teams: await teams, retroWalls: retroWalls});\n        } catch (e) {\n            if (e instanceof UnauthorizedException) {\n                this.props.history.push(\"/unauthorized\");\n            }\n        }\n    }\n\n    convertJsonToCsv(): { data: Data, headers: LabelKeyObject[] } {\n        let headers: LabelKeyObject[] = [\n            {label: \"Wall Name\", key: \"wallName\"},\n            {label: \"Note\", key: \"noteText\"},\n            {label: \"Up-votes\", key: \"upvotes\"}\n        ]\n\n        let data: Data = []\n        const {notes, retroWalls} = this.props\n\n        retroWalls.walls.forEach((wall) => {\n            notes.notes.forEach((note) => {\n                if (note.wallId === wall.wallId) {\n                    data.push(\n                        {wallName: wall.title, noteText: note.noteText, upvotes: note.likedBy?.length || 0}\n                    )\n                }\n            })\n        })\n\n        return {data: data, headers: headers}\n    }\n\n    private async shareBoardWith(selectedTeams: Array<ITeam>): Promise<boolean> {\n        try {\n            return await this.props.retroBoardService.shareBoard(this.state.retroBoardId, selectedTeams);\n        } catch (e) {\n            return false;\n        }\n    }\n\n\n    render() {\n        let {retroBoardId} = this.props.match.params as PropsFromParent\n        let walls = this.state.retroWalls.walls.map((wall, index) => {\n            wall.retroBoardId = retroBoardId!\n            return <Col key={index}>\n                <StickyWall retroBoardService={this.props.retroBoardService}\n                            retroWall={wall}\n                            notes={this.props.notes.notes}\n                            sortBy={this.state.sortSelectValue}\n                />\n            </Col>\n        });\n        return (\n            <div style={{padding: \"50px\"}}>\n                <Row>\n                    <Col>\n                        <SortSelect/>\n                    </Col>\n                    <Col className={\"align-self-center\"}>\n                        <BlurToggle {...this.props} />\n                    </Col>\n                    <Col className={\"align-self-center\"}>\n                        <div className=\"pull-right\">\n                            <ShareBoard teams={this.state.teams} shareWith={this.shareBoardWith}/>\n                        </div>\n\n                        <Button className={\"pull-right\"} style={{border: \"1px solid black\"}} variant={\"light\"}>\n                            <CSVLink {...this.convertJsonToCsv()} target={\"_blank\"}\n                                     filename={this.props.retroBoard.name}>\n                                <i className=\"fa fa-file-excel-o\" style={{color: \"blue\"}}/>\n                            </CSVLink>\n                        </Button>\n                    </Col>\n                </Row>\n                <Row>\n                    {walls}\n                </Row>\n            </div>\n        )\n    }\n\n}\n\nfunction mapStateToProps(state: RetroBoardState): RetroBoardState {\n\n\n    return {\n        retroBoard: state.retroBoard,\n        retroWalls: state.retroWalls,\n        notes: state.notes\n    }\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<RetroBoardActionTypes>) {\n    const retroBoardActions = new RetroBoardActions();\n\n\n    return {\n        createRetroWalls: async (retroWalls: RetroWalls) => dispatch(retroBoardActions.createRetroWalls(retroWalls)),\n        createRetroBoard: async (retroBoard: RetroBoard) => dispatch(retroBoardActions.createRetroBoard(retroBoard)),\n        refreshRetroWalls: async () => dispatch(retroBoardActions.refreshRetroWalls())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RetroBoardPage)","import React from 'react'\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Firebase from \"../service/Firebase\";\nimport Button from \"react-bootstrap/Button\";\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\n\ninterface Props extends RouteComponentProps {\n    success: () => void\n}\n\ninterface State {\n    firebase: Firebase\n    idToken: string\n}\n\nclass LoginPage extends React.Component<Props, State> {\n\n    state: State = {\n        firebase: Firebase.getInstance(),\n        idToken: \"\"\n    }\n\n    constructor(props: Props) {\n        super(props)\n        this.tryGoogleLogin = this.tryGoogleLogin.bind(this)\n        this.tryAnonymousLogin = this.tryAnonymousLogin.bind(this)\n    }\n\n    getReferrerUrl = () => {\n        if (this.props.location.state) {\n            return (this.props.location.state as {referrer: string}).referrer\n        }\n        return \"/\"\n    }\n\n\n    tryGoogleLogin() {\n        this.state.firebase.isUserAuthenticated()\n            .then(isAuth => {\n                if (!isAuth) {\n                    this.state.firebase.authenticateUser().then(() => {\n                        this.props.success()\n                        this.props.history.push(this.getReferrerUrl())\n                    })\n                }\n            });\n\n        // if (this.state.firebase.isUserAuthenticated()) {\n        //     this.state.firebase.authenticateUser().then(() => {\n        //         this.props.success()\n        //         this.props.history.push(this.getReferrerUrl())\n        //     })\n        // }\n    }\n\n    async tryAnonymousLogin() {\n        if (!await this.state.firebase.isUserAuthenticated()) {\n            this.state.firebase.authenticateAnonymousUser().then(() => {\n                console.log(this.props.location.state)\n                this.props.success()\n                this.props.history.push(this.getReferrerUrl())\n            })\n        }\n    }\n\n    render(): JSX.Element {\n        return <Container>\n            <Row>\n                <Col></Col>\n                <Col>\n                    <h2>Login Here!</h2>\n                    <Button className=\"btn btn-block btn-social btn-google\" onClick={this.tryGoogleLogin}>\n                        <span className=\"fa fa-google\"></span>\n                        Sign in with Google\n                    </Button>\n                    <Button className=\"btn btn-block btn-social\" onClick={this.tryAnonymousLogin}>\n                        <span className=\"fa fa-user\"></span>\n                        Sign in as Anonymous User\n                    </Button>\n                </Col>\n                <Col></Col>\n            </Row>\n        </Container>\n    }\n}\n\nexport default withRouter(LoginPage)","import React, {useEffect} from 'react'\nimport Firebase from \"../../service/Firebase\";\nimport {Redirect} from 'react-router-dom';\n\ninterface Props {\n    service: Firebase\n}\n\nconst Logout: React.FunctionComponent<Props> = (props: Props) => {\n\n    useEffect(() => {\n        props.service.logout()\n    }, [props])\n\n    return <Redirect to={\"/login\"} />\n\n}\n\nexport default Logout","import * as React from 'react';\nimport {FunctionComponent, useState} from 'react';\nimport {Badge, Button, FormControl, Modal} from \"react-bootstrap\";\nimport Firebase from \"../../../service/Firebase\";\n\ninterface Props {\n    teamName: string\n    addTeamMember: (teamMemberEmail: string) => void\n}\nconst AddNewTeamMember: FunctionComponent<Props> = (props: Props) => {\n\n    const [showModal, setShowModal] = useState(false);\n    const openModal = () => setShowModal(true);\n    const closeModal = () => setShowModal(false);\n    const [teamMemberEmail, setTeamMemberEmail] = useState(\"\");\n    const [error, setError] = useState({error: true, msg: \"\"});\n\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setError({error: false, msg: \"\"});\n        setTeamMemberEmail(e.currentTarget.value);\n    }\n    const addTeamMember = () => {\n        if (teamMemberEmail === Firebase.getInstance().getLoggedInUser()?.email) {\n            setError({error: true, msg: \"LOL! You cannot add your own email!!!\"});\n        } else {\n            props.addTeamMember(teamMemberEmail);\n            closeModal();\n            setError({error: false, msg: \"\"});\n        }\n    }\n\n    return <>\n        <Button variant={\"link\"} onClick={openModal}><i className={\"fa fa-user-plus fa-lg\"} /></Button>\n\n        <Modal show={showModal} onHide={closeModal}>\n            <Modal.Header>\n                <h4>Add New Team Member</h4>\n                <Badge variant={\"primary\"}>{props.teamName}</Badge>\n            </Modal.Header>\n            <Modal.Body>\n                <FormControl autoComplete={\"disabled\"} onChange={handleChange}\n                    placeholder={\"Enter team member's email address\"} type={\"email\"} />\n                {error.error ? <span className={\"text-danger\"}>{error.msg}</span> : <></>}\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant={\"primary\"} onClick={addTeamMember}>Add Member</Button>\n                <Button variant={\"light\"} onClick={closeModal}>Cancel</Button>\n            </Modal.Footer>\n        </Modal>\n    </>\n}\n\nexport default AddNewTeamMember;","import * as React from 'react';\nimport {FunctionComponent, useState} from 'react';\nimport {Badge, Button, Card, ListGroup, ListGroupItem, Modal} from \"react-bootstrap\";\nimport {ITeam} from \"../../../models/Team\";\nimport User from \"../../../models/User\";\nimport AddNewTeamMember from \"./AddNewTeamMember\";\nimport Firebase from \"../../../service/Firebase\";\n\ninterface Props {\n    team: ITeam\n    removeMember: (member: User) => void\n    addTeamMember: (team: ITeam, teamMemberEmail: string) => void\n    deleteTeam: (team: ITeam) => void\n}\n\nconst TeamCard: FunctionComponent<Props> = (props: Props) => {\n\n    const [currUser, setCurrUser] = useState(new User());\n    const [openModal, setOpenModal] = useState(false);\n    const showModal = (user: User) => {\n        setCurrUser(user);\n        setOpenModal(true);\n    }\n    const closeModal = () => setOpenModal(false);\n    const removeUser = () => {\n        props.removeMember(currUser);\n        closeModal();\n    }\n\n    const addTeamMember = (team: ITeam, teamMemberEmail: string) => {\n        props.addTeamMember(team, teamMemberEmail)\n    }\n\n    const isOwner = (uid:string) => props.team.createdBy === uid;\n\n    const render = () => {\n        return <>\n            <Card>\n                <Card.Header>\n                    <div className={\"pull-right\"}>\n                        <AddNewTeamMember teamName={props.team.teamName}\n                                          addTeamMember={(teamMemberEmail: string) => addTeamMember(props.team, teamMemberEmail)}/>\n\n                        {\n                            // only the team creator can delete the team\n                            isOwner(Firebase.getInstance().getLoggedInUser()?.uid!) ?\n                                <Button onClick={() => props.deleteTeam(props.team)} variant={\"link\"} style={{color: \"crimson\"}}><i\n                                    className={\"fa fa-lg fa-trash\"}/></Button> : <></>\n                        }\n\n                    </div>\n                    <h4>{props.team.teamName}</h4>\n                </Card.Header>\n                <Card.Body>\n                    <ListGroup>\n                        {props.team.teamMembers.map((teamMember, index) => (\n                            <ListGroupItem key={index}>\n                                <div style={{marginLeft: \"auto !important\"}}>\n                                    <div className={\"pull-right\"}>\n                                        {isOwner(Firebase.getInstance().getLoggedInUser()?.uid!) ?\n                                        <Button variant={\"link\"} onClick={() => showModal(teamMember)}> <i\n                                            style={{color: \"crimson\"}} className={\"fa fa-xs fa-remove\"}/></Button> : <></> }\n                                    </div>\n                                    {teamMember.displayName} <br/>\n                                    <span className={\"text-muted\"}>{teamMember.email}</span> <br />\n                                    {isOwner(teamMember.uid) ? <Badge variant={\"primary\"}>owner</Badge> : <Badge variant={\"secondary\"}>member</Badge>}\n                                </div>\n\n                            </ListGroupItem>\n                        ))}\n                    </ListGroup>\n                </Card.Body>\n            </Card>\n\n            <Modal show={openModal} onHide={closeModal}>\n                <Modal.Body>\n                    <h3>Are you sure you want to remove <strong>{currUser.displayName}</strong> from the Team?</h3>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button onClick={removeUser}>Yes</Button>\n                    <Button onClick={closeModal}>Cancel</Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    }\n\n    return render();\n}\n\nexport default TeamCard;","import User from \"./User\";\n\nexport interface ITeam {\n    teamId: string;\n    teamName: string;\n    teamMembers: Array<User>;\n    createdBy: string;\n}\nclass Team implements ITeam {\n    teamId: string = \"\";\n    teamName: string = \"\";\n    teamMembers: Array<User> = [];\n    createdBy: string = \"\";\n\n}\n\nexport default Team;","import * as React from 'react'\nimport {FunctionComponent, useState} from 'react'\nimport {Button, FormControl, Modal} from \"react-bootstrap\";\nimport Team, {ITeam} from \"../../../models/Team\";\nimport Firebase from \"../../../service/Firebase\";\n\ninterface Props {\n    createTeam: (team: ITeam) => void\n}\nconst CreateNewTeam: FunctionComponent<Props> = (props: Props) => {\n\n    const [showModal, setShowModal] = useState(false);\n    const openModal = () => setShowModal(true);\n    const closeModal = () => setShowModal(false);\n    const [teamName, setTeamName] = useState(\"\");\n\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setTeamName(e.currentTarget.value);\n    }\n\n    const handleCreate = () => {\n        let team = new Team();\n        team.teamName = teamName;\n        team.teamMembers = [];\n        team.createdBy = Firebase.getInstance().getLoggedInUser()?.uid!;\n        props.createTeam(team);\n        closeModal();\n    }\n\n    return <>\n        <Button variant={\"primary\"} onClick={openModal}>Create New Team</Button>\n\n        <Modal show={showModal} onHide={closeModal}>\n            <Modal.Header><h3>Create New Team</h3></Modal.Header>\n            <Modal.Body>\n                <FormControl autoFocus={true} autoComplete={\"disabled\"} onChange={handleChange} placeholder={\"Enter your team name...\"} />\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant={\"primary\"} onClick={handleCreate}>Create</Button>\n                <Button variant={\"light\"} onClick={closeModal}>Cancel</Button>\n            </Modal.Footer>\n        </Modal>\n    </>\n}\n\nexport default CreateNewTeam;","import * as React from 'react';\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\nimport {Col, Row} from \"react-bootstrap\";\nimport TeamCard from \"../components/dumb/teams/TeamCard\";\nimport User from \"../models/User\";\nimport Team, {ITeam} from \"../models/Team\";\nimport CreateNewTeam from \"../components/dumb/teams/CreateNewTeam\";\nimport TeamsServiceV1 from \"../service/Teams/TeamsServiceV1\";\n\ninterface Props extends RouteComponentProps {\n    teamsService: TeamsServiceV1;\n}\ninterface State {\n    teams: Array<Team>\n}\n\nclass TeamsPage extends React.Component<Props, State> {\n\n    state: State = {teams: []};\n\n    componentDidMount(): void {\n        document.title = \"Teams\";\n        // TODO: show loaded until the teams are loaded\n        this.getMyTeams();\n    }\n\n    private async getMyTeams() {\n        let myTeams = await this.props.teamsService.getMyTeams()\n        this.setState({teams: myTeams});\n    }\n\n    render() {\n\n        return <>\n            <Row>\n                <Col md={4} sm={6}>\n                    <div className={\"pb-2 mt-4 mb-2 border-bottom\"}>\n                        <h3>Create New Team</h3>\n                    </div>\n                </Col>\n            </Row>\n            <Row>\n                <Col xs={6} md={4}>\n                    <CreateNewTeam createTeam={(team: ITeam) => this.createTeam(team)}  />\n                </Col>\n            </Row>\n            <hr/>\n            <Row>\n                <Col md={4} sm={6}>\n                    <div className={\"pb-2 mt-4 mb-2 border-bottom\"}>\n                        <h3>Existing Teams</h3>\n                    </div>\n                </Col>\n            </Row>\n            <Row>\n                {\n                    this.state.teams.map((team, index) => (\n                        <Col md={4} key={index}>\n                            <TeamCard team={team} removeMember={(member: User) => {\n                                this.removeMember(team, member)\n                            }} addTeamMember={(team, teamMemberEmail) => this.addTeamMember(team, teamMemberEmail)}\n                            deleteTeam={(team) => this.deleteTeam(team)}\n                            />\n                        </Col>\n                    ))\n                }\n            </Row>\n\n        </>;\n    }\n\n    private async createTeam(team: ITeam) {\n        console.log(\"Creating new team...\", this.state)\n        let newTeam = await this.props.teamsService.createNewTeam(team);\n        const newTeams = [...this.state.teams, newTeam];\n        this.setState({teams: newTeams});\n    }\n\n    private async removeMember(team: ITeam, member: User) {\n        console.log(\"Removing member\");\n        try {\n            await this.props.teamsService.removeTeamMember(team, member);\n            let newTeams = this.state.teams.map(team => ({\n                ...team,\n                teamMembers: team.teamMembers.filter(teamMember => teamMember.uid !== member.uid)\n            }));\n            this.setState({teams: newTeams});\n        } catch(e) {\n            console.log(\"Error: \" + e.msg, e);\n        }\n\n    }\n\n    private async addTeamMember(team:Team, teamMemberEmail: string) {\n        console.log(\"Adding team member...\");\n        try {\n            let teamMember = await this.props.teamsService.getTeamMember(teamMemberEmail);\n            let teamMembersResponse: {teamMembers: Array<User>} = await this.props.teamsService.addTeamMember(team, teamMember);\n            let newTeams = this.state.teams.map(itr => {\n                if (itr.teamId === team.teamId) {\n                    team.teamMembers = teamMembersResponse.teamMembers;\n                    return team;\n                } else return itr;\n            })\n            this.setState({teams: newTeams});\n        } catch (e) {\n            console.log(\"Team member with the given email is not found!!!\");\n            // TODO: show a pop-up and ask to send an invite\n        }\n    }\n\n    private async deleteTeam(team: ITeam) {\n        try {\n            await this.props.teamsService.deleteTeam(team);\n            const newState = this.state.teams.filter(t => t.teamId !== team.teamId);\n            this.setState({teams: newState});\n        } catch (e) {\n            alert(\"Cannot delete team!\");\n        }\n    }\n}\n\nexport default withRouter(TeamsPage);","import Team, {ITeam} from \"../../models/Team\";\nimport {request} from \"../../env-config\";\nimport User from \"../../models/User\";\n\nclass TeamsServiceV1 {\n\n    static instance:TeamsServiceV1;\n\n    public static getInstance():TeamsServiceV1 {\n        if (!TeamsServiceV1.instance)\n            TeamsServiceV1.instance = new TeamsServiceV1();\n        return TeamsServiceV1.instance;\n    }\n\n    public async createNewTeam(team: ITeam) {\n        let response = await request.post(\"/teams\", team);\n        if (response.status === 201) {\n            let newTeamResponse = await request.get(response.headers.location);\n            return newTeamResponse.data as ITeam;\n        }\n\n        throw Error(\"Encountered some trouble while trying to create new team!\");\n    }\n\n    public async addTeamMember(team: Team, teamMember: User) {\n        let response = await request.post(\"/teams/member\", {team: team, teamMember: teamMember});\n        if (response.status === 201) {\n            let teamsResponse = await request.get(response.headers.location);\n            if (teamsResponse.status === 200)\n                return await teamsResponse.data as {teamMembers: Array<User>};\n        }\n\n        throw Error(\"Member cannot be added. Response Status: \" + response.status);\n    }\n\n    public async removeTeamMember(team: Team, teamMember: User) {\n        let response = await request.delete(`/teams/${team.teamId}/member/${teamMember.uid}`)\n        if (204 !== response.status)\n            throw Error(\"error deleting team member. Status: \" + response.status);\n    }\n\n    public async getTeamMember(teamMemberEmail: string) {\n        let response = await request.get(\"/users\", {\n            params: {email: teamMemberEmail}\n        });\n\n        if (response.status === 200) {\n            return response.data as User;\n        }\n\n        throw Error(\"No user found! Response Status: \" + response.status);\n    }\n\n    public async deleteTeam(team: ITeam) {\n        let response = await request.delete(`/teams/${team.teamId}`);\n        if (response.status !== 204) {\n            throw Error(\"Encountered problem while deleting the team. Response Status: \" + response.status);\n        }\n    }\n\n    public async getMyTeams(): Promise<Array<ITeam>> {\n        let response = await request.get(\"/teams\");\n        if (response.status === 200) {\n            return await response.data as Array<ITeam>;\n        }\n        return [];\n    }\n}\n\nexport default TeamsServiceV1;","import BoardTemplate, {BoardTemplates} from \"../../models/BoardTemplate\";\nimport {request} from \"../../env-config\";\n\nclass TemplateService {\n\n    public static getInstance() {\n        return new TemplateService();\n    }\n\n    public async createBoardTemplate(boardTemplate: BoardTemplate) {\n        let response = await request.post(`/templates`, boardTemplate);\n        if (201 === response.status) {\n            let templateResponse = await request.get(response.headers.location);\n            return templateResponse.data as BoardTemplate;\n        }\n\n        throw Error(\"Cannot create template. There is some error in the backend. Status Code: \" + response.status);\n    }\n\n    public async getBoardTemplates() {\n        let response = await request.get(`/templates`);\n        if (200 === response.status) {\n            return response.data as BoardTemplates;\n        }\n\n        throw Error(\"Error fetching templates. Status: \" + response.status);\n    }\n\n    public async deleteBoardTemplate(boardTemplate: BoardTemplate) {\n        let response = await request.delete(`/templates/${boardTemplate.templateId}`);\n        if (204 === response.status) {\n            return;// delete successful\n        }\n\n        throw Error(\"Error deleting template. Status: \" + response.status);\n    }\n}\n\nexport default TemplateService;","import React from 'react';\nimport {HashRouter as Router} from 'react-router-dom'\nimport './App.css';\nimport LayoutAuthenticated from \"./components/smart/layouts/LayoutAuthenticated\";\nimport LayoutUnauthenticated from \"./components/smart/layouts/LayoutUnauthenticated\";\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store/Store\";\nimport Firebase from \"./service/Firebase\";\nimport {Route, RouteComponentProps} from \"react-router\";\nimport HomePage from \"./containers/HomePage\";\nimport RetroBoardPage from \"./containers/RetroBoardPage\";\nimport LoginPage from \"./containers/LoginPage\";\nimport Logout from \"./components/smart/Logout\";\nimport RetroBoardServiceFactory from \"./service/RetroBoard/RetroBoardServiceFactory\";\nimport TeamsPage from \"./containers/TeamsPage\";\nimport TeamsServiceV1 from \"./service/Teams/TeamsServiceV1\";\nimport TemplateService from \"./service/Templates/TemplateService\";\n\ninterface Props {\n}\n\ninterface State {\n    isLogInFlowExecuted: boolean\n}\n\nclass App extends React.Component<Props, State> {\n\n    state: State = {\n        isLogInFlowExecuted: false\n    }\n\n    render() {\n        return <Provider store={store}>\n            <Router>\n                <Route exact path={\"/login\"} component={(props: RouteComponentProps) =>\n                    <LayoutUnauthenticated success={() => this.setState({isLogInFlowExecuted: true})}>\n                        <LoginPage\n                            success={() => this.setState({isLogInFlowExecuted: true})}/>\n                    </LayoutUnauthenticated>}/>\n\n                <Route exact path={\"/\"} component={(props: RouteComponentProps) =>\n                    <LayoutAuthenticated>\n                        <HomePage {...props}\n                                  retroBoardService={RetroBoardServiceFactory.getInstance()}\n                                  templateService={TemplateService.getInstance()}/>\n                    </LayoutAuthenticated>}/>\n\n                <Route exact path={\"/teams\"} component={(props: RouteComponentProps) =>\n                    <LayoutAuthenticated>\n                        <TeamsPage {...props}\n                                  teamsService={TeamsServiceV1.getInstance()}/>\n                    </LayoutAuthenticated>}/>\n\n                <Route exact path={\"/retro-board/:uid/:retroBoardId\"} component={(props: RouteComponentProps) =>\n                    <LayoutAuthenticated>\n                        <RetroBoardPage {...props}\n                                        retroBoardService={RetroBoardServiceFactory.getInstance()}\n                                        teamsService={TeamsServiceV1.getInstance()}/>\n                    </LayoutAuthenticated>}/>\n\n                    <Route exact path={\"/logout\"} component={(props: RouteComponentProps) =>\n                    <LayoutAuthenticated>\n                        <Logout service={Firebase.getInstance()} />\n                    </LayoutAuthenticated>}/>\n            </Router>\n        </Provider>\n\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store/Store\";\nimport 'bootstrap-social/assets/css/docs.css'\nimport 'bootstrap-social/assets/css/font-awesome.css'\nimport 'bootstrap-social/assets/img/bootstrap-social.png'\nimport 'bootstrap-social/bootstrap-social.css'\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}